{"version":3,"sources":["views/base/tableHeader/TableHeader.js","views/packages/AddPackage.js","views/packages/Packages.js"],"names":["TableHeader","keyword","changeKeyword","children","className","sm","type","name","placeholder","autoComplete","value","onChange","onKeyPress","AddPackage","show","setShow","refetch","itemId","setEditId","React","useState","setKeyword","services","setServices","petTypes","setPetTypes","items","setItems","description","price","petTypeId","serviceId","active","packageRecord","setPackageRecord","useAxios","url","method","manual","loading","fetchData","fetchRecord","handleChange","e","oldState","target","checked","initializeRecord","useCallback","a","result","data","rows","defaultItems","PackageItems","map","item","label","Item","id","useEffect","params","s","then","resp","onClose","closeButton","row","md","htmlFor","xs","custom","petType","service","displayName","context","isMulti","options","onInputChange","input","color","variant","shape","onClick","config","itemIds","fields","key","Packages","totalPages","setTotalPages","currentPage","setActivePage","editId","pageNo","error","fetch","lg","striped","itemsPerPage","overTableSlot","search","underTableSlot","activePage","pages","onActivePageChange","i","scopedSlots","size"],"mappings":"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","file":"static/js/11.cae07a4c.chunk.js","sourcesContent":["import React from 'react'\n\nimport {\n  CRow,\n  CCol,\n  CFormGroup,\n  CInput,\n} from '@coreui/react'\n\n\nconst TableHeader = ({ keyword = '', changeKeyword = null, children }) => {\n  return (\n    <CRow className=\"align-items-center justify-content-between\">\n      <CCol sm=\"4\">\n        <CFormGroup className=\"mb-0\">\n          <CInput\n            type=\"text\"\n            name=\"nf-text\"\n            placeholder=\"Search Here..\"\n            autoComplete=\"off\"\n            value={keyword}\n            onChange={changeKeyword}\n            onKeyPress={changeKeyword}\n          />\n        </CFormGroup>\n      </CCol>\n      <CCol sm=\"4\" className=\"d-flex justify-content-end\">\n        { children }\n      </CCol>\n    </CRow>\n  )\n}\n\nexport default TableHeader\n","import React from 'react'\nimport useAxios from 'axios-hooks'\n\nimport AsyncSelect from 'react-select';\n\nimport {\n  CModal,\n  CModalHeader,\n  CModalBody,\n  CModalFooter,\n  CButton,\n  CFormGroup,\n  CCol,\n  CLabel,\n  CInput,\n  CTextarea,\n  CSwitch,\n  CRow,\n  CSelect,\n} from '@coreui/react'\n\nconst AddPackage = ({ show, setShow, refetch, itemId, setEditId }) => {\n  const [keyword, setKeyword] = React.useState('')\n  const [services, setServices] = React.useState([])\n  const [petTypes, setPetTypes] = React.useState([])\n  const [items, setItems] = React.useState([])\n\n  const [packageRecord, setPackageRecord] = React.useState({\n    name: '',\n    description: '',\n    price: '',\n    petTypeId: '',\n    serviceId: '',\n    items: [],\n    active: true\n  })\n\n  const [\n    { loading },\n    fetchData\n  ] = useAxios(\n    {\n      url: 'https://app.aloropivetcenter.com/api/packages',\n      method: 'POST'\n    },\n    { manual: true }\n  )\n\n  const [\n    ,\n    fetchRecord\n  ] = useAxios(\n    {\n      url: 'https://app.aloropivetcenter.com/api/items',\n      method: 'GET'\n    },\n    { manual: true }\n  )\n\n  const resetAndCancel = () => {\n    setShow(false)\n    setPackageRecord({\n      name: '',\n      description: '',\n      price: '',\n      petTypeId: '',\n      serviceId: '',\n      items: [],\n      active: true\n    })\n\n    setEditId(null)\n  }\n\n  const confirmClose = () => {\n    setShow(false)\n    setPackageRecord({\n      name: '',\n      description: '',\n      price: '',\n      petTypeId: '',\n      serviceId: '',\n      items: [],\n      active: true\n    })\n    setEditId(null)\n    refetch()\n  }\n\n  const handleChange = (e) => {\n    setPackageRecord((oldState) => {\n      return {\n        ...oldState,\n        [e.target.name]: e.target.name === 'active' ? e.target.checked : e.target.value\n      }\n    })\n  }\n\n  const handleItemChange = (context) => {\n    setPackageRecord((oldState) => {\n      return {\n        ...oldState,\n        items: context\n      }\n    })\n  }\n\n  const storePackage = () => {\n    if (!loading) {\n      const config = {\n        data: {\n          ...packageRecord,\n          itemIds: packageRecord.items.map(item => item.value)\n        }\n      }\n\n      delete config.data.items\n\n      if (itemId) {\n        config.url = `https://app.aloropivetcenter.com/api/packages/${itemId}`\n        config.method = 'PUT'\n      }\n\n      fetchData(config).then(resp => {\n        confirmClose()\n      })\n    }\n  }\n\n  const initializeRecord = React.useCallback(async () => {\n    let result = await fetchData({\n      url: `https://app.aloropivetcenter.com/api/services`,\n      method: 'GET'\n    })\n\n    setServices(result?.data?.rows || [])\n\n    result = await fetchData({\n      url: `https://app.aloropivetcenter.com/api/pet-types`,\n      method: 'GET'\n    })\n\n    setPetTypes(result?.data?.rows || [])\n\n    if (itemId) {\n      result = await fetchData({\n        url: `https://app.aloropivetcenter.com/api/packages/${itemId}`,\n        method: 'GET'\n      })\n\n      const defaultItems = result.data.PackageItems.map(item => {\n        return {\n          label: item.Item.name,\n          value: item.Item.id\n        }\n      })\n\n      setItems(defaultItems)\n\n      setPackageRecord({\n        name: result.data.name,\n        description: result.data.description,\n        price: result.data.price,\n        petTypeId: result.data.petTypeId,\n        serviceId: result.data.serviceId,\n        items: defaultItems,\n        active: result.data.active\n      })\n    }\n  }, [fetchData, itemId])\n\n  React.useEffect(() => {\n    if (show) {\n      initializeRecord()\n    }\n  }, [show, initializeRecord])\n\n  React.useEffect(() => {\n    if (show) {\n      fetchRecord({\n        params: {\n          s: keyword\n        }\n      }).then(resp => {\n        setItems((resp?.data?.rows || []).map(item => {\n          return {\n            label: item.name,\n            value: item.id\n          }\n        }))\n      })\n    }\n  }, [keyword, fetchRecord, show])\n\n  return (\n    <>\n      <CModal\n        show={show}\n        onClose={() => setShow(false)}\n      >\n        <CModalHeader closeButton>Add Package</CModalHeader>\n        <CModalBody>\n          {\n            loading?\n            <div className=\"py-5 text-center\">Loading Details ...</div> :\n            <CRow>\n              <CCol className=\"px-5 pt-4\">\n                <CFormGroup row>\n                  <CCol md=\"3\">\n                    <CLabel className=\"pt-1\" htmlFor=\"text-name\">Name</CLabel>\n                  </CCol>\n                  <CCol xs=\"12\" md=\"9\">\n                    <CInput id=\"text-name\" name=\"name\" value={packageRecord.name} onChange={handleChange} placeholder=\"Enter Name for item\" />\n                  </CCol>\n                </CFormGroup>\n                <CFormGroup row>\n                  <CCol md=\"3\">\n                    <CLabel className=\"pt-1\" htmlFor=\"text-price\">Price</CLabel>\n                  </CCol>\n                  <CCol xs=\"12\" md=\"9\">\n                    <CInput id=\"text-price\" name=\"price\" value={packageRecord.price} onChange={handleChange} placeholder=\"Enter Price for item\" />\n                  </CCol>\n                </CFormGroup>\n                <CFormGroup row>\n                  <CCol md=\"3\">\n                    <CLabel className=\"pt-1\" htmlFor=\"text-pet-type\">Pet Type</CLabel>\n                  </CCol>\n                  <CCol xs=\"12\" md=\"9\">\n                    <CSelect \n                      custom \n                      name=\"petTypeId\" \n                      id=\"text-pet-type\"\n                      onChange={handleChange}\n                      value={packageRecord.petTypeId}\n                    >\n                      <option value=\"0\">Select</option>\n                      {\n                        petTypes.map(petType => {\n                          return (\n                            <option key={petType.id} value={petType.id}>{petType.name}</option>\n                          )\n                        })\n                      }\n                    </CSelect>\n                  </CCol>\n                </CFormGroup>\n                <CFormGroup row>\n                  <CCol md=\"3\">\n                    <CLabel className=\"pt-1\" htmlFor=\"text-service\">Service</CLabel>\n                  </CCol>\n                  <CCol xs=\"12\" md=\"9\">\n                    <CSelect \n                      custom \n                      name=\"serviceId\" \n                      id=\"text-service\"\n                      onChange={handleChange}\n                      value={packageRecord.serviceId}\n                    >\n                      <option value=\"0\">Select</option>\n                      {\n                        services.map(service => {\n                          return (\n                            <option key={service.id} value={service.id}>{service.displayName}</option>\n                          )\n                        })\n                      }\n                    </CSelect>\n                  </CCol>\n                </CFormGroup>\n                <CFormGroup row>\n                  <CCol md=\"3\">\n                    <CLabel className=\"pt-1\" htmlFor=\"text-service\">Items</CLabel>\n                  </CCol>\n                  <CCol xs=\"12\" md=\"9\">\n                    <AsyncSelect onChange={handleItemChange} name=\"itemIds\" isMulti options={items} value={packageRecord.items} onInputChange={(input) => setKeyword(input)} ></AsyncSelect>\n                  </CCol>\n                </CFormGroup>\n                <CFormGroup row>\n                  <CCol md=\"3\">\n                    <CLabel className=\"pt-1\" htmlFor=\"text-description\">Description</CLabel>\n                  </CCol>\n                  <CCol xs=\"12\" md=\"9\">\n                    <CTextarea id=\"text-description\" name=\"description\" value={packageRecord.description} onChange={handleChange} placeholder=\"Enter Description ...\" ></CTextarea>\n                  </CCol>\n                </CFormGroup>\n                <CFormGroup row>\n                  <CCol xs=\"3\" md=\"3\">\n                    <CLabel htmlFor=\"text-description\">Active</CLabel>\n                  </CCol>\n                  <CCol xs=\"9\" md=\"9\">\n                    <CSwitch\n                      color=\"primary\"\n                      name=\"active\"\n                      checked={packageRecord.active}\n                      onChange={handleChange}\n                      {\n                        ...({\n                          variant: 'opposite',\n                          shape:'pill'\n                        })\n                      }\n                    />\n                  </CCol>\n                </CFormGroup>\n              </CCol>\n            </CRow>\n          }\n        </CModalBody>\n        <CModalFooter>\n          <CButton\n            color=\"secondary\"\n            onClick={() => resetAndCancel()}\n          >\n            Cancel\n          </CButton>\n          <CButton onClick={storePackage} className=\"ml-1\" color=\"primary\">{ loading ? 'Loading' : 'Confirm' }</CButton>\n        </CModalFooter>\n      </CModal>\n    </>\n  )\n}\n\nexport default AddPackage\n","import React from 'react'\nimport useAxios from 'axios-hooks'\nimport TableHeader from '../base/tableHeader/TableHeader'\nimport AddPackage from './AddPackage'\n\nimport {\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CDataTable,\n  CRow,\n  CButton,\n  CPagination\n} from '@coreui/react'\n\nconst fields = [\n    'name',\n    'price',\n    {\n      key: 'createdAt',\n      label: 'Registered'\n    },\n    'description',\n    'actions'\n  ]\n\nconst Packages = () => {\n  const [show, setShow] = React.useState(false)\n\n  const [keyword, setKeyword] = React.useState('')\n\n  const [totalPages, setTotalPages] = React.useState(1)\n  const [currentPage, setActivePage] = React.useState(1)\n\n  const [editId, setEditId] = React.useState(null)\n\n  const [{ data, loading, error }, fetch] = useAxios(\n    {\n      url: 'https://app.aloropivetcenter.com/api/packages',\n      method: 'GET',\n      params: {\n        pageNo: currentPage\n      }\n    },\n    {\n      manual: true\n    }\n  )\n\n  const changeKeyword = (e) => {\n    if(e.key === 'Enter') {\n      fetch({\n        params: {\n          search: keyword\n        }\n      })\n    } else {\n      setKeyword(e.target.value)\n    }\n  }\n\n  const editModal = (id) => {\n    setEditId(id)\n    setShow(true)\n  }\n\n  const deleteItem = (id) => {\n    fetch({\n      url: `https://app.aloropivetcenter.com/api/packages/${id}`,\n      method: 'DELETE'\n    })\n  }\n\n  React.useEffect(() => {\n    fetch()\n      .then(resp => {\n        setTotalPages(resp.data.totalPages)\n      })\n  }, [fetch])\n\n  return (\n    <>\n      <CRow>\n        <CCol xs=\"12\" lg=\"12\">\n          <CCard>\n            <CCardHeader>\n              Packages\n            </CCardHeader>\n            <CCardBody>\n            <CDataTable\n              items={loading ? [] : (error ? [] : data?.rows || [])}\n              fields={fields}\n              striped\n              itemsPerPage={10}\n              loading={loading}\n              overTableSlot={\n                <TableHeader keyword={keyword} changeKeyword={changeKeyword}>\n                  <CButton\n                    color=\"primary\"\n                    variant=\"outline\"\n                      className=\"m-2 pl-3 pr-4\"\n                      onClick={() => setShow(true)}\n                    >\n                      <span className=\"ml-1\">Add Package</span>\n                    </CButton>\n                </TableHeader>\n              }\n              underTableSlot={\n                <CPagination\n                  activePage={currentPage}\n                  pages={totalPages}\n                  onActivePageChange={(i) => setActivePage(i)}\n                ></CPagination>\n              }\n              scopedSlots={{\n                'actions':\n                  (item) => (\n                    <td>\n                      <CButton onClick={() => editModal(item.id)} color=\"primary\" size=\"sm\" className=\"mr-1\">Edit</CButton>\n                      <CButton onClick={() => deleteItem(item.id)} color=\"danger\" size=\"sm\">Delete</CButton>\n                    </td>\n                  )\n              }}\n            />\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n\n      <AddPackage show={show} setShow={setShow} refetch={fetch} itemId={editId} setEditId={setEditId}/>\n    </>\n  )\n}\n\nexport default Packages\n"],"sourceRoot":""}