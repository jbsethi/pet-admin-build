{"version":3,"sources":["utils/dateUtils.js","views/treatment/Treatments.js"],"names":["formatDate","date","Date","toLocaleString","datesObj","convert","d","constructor","Array","Number","String","year","month","NaN","compare","a","b","isFinite","this","valueOf","inRange","start","end","fields","key","label","Visitors","match","history","useHistory","React","useState","items","setItems","useAxios","url","PUBLIC_API","method","manual","loading","fetch","useEffect","params","appointment","checkUp","then","resp","data","rows","map","row","orderId","id","Patient","xs","lg","striped","itemsPerPage","pagination","onRowClick","item","push","scopedSlots","createdAt"],"mappings":"6KAAA,oEAAO,IAAMA,EAAa,SAACC,GAEzB,OAAQ,IAAIC,KAAKD,GAAOE,kBAGbC,EAAW,CACtBC,QAAQ,SAASC,GAUb,OACIA,EAAEC,cAAgBL,KAAOI,EACzBA,EAAEC,cAAgBC,MAAQ,IAAIN,KAAKI,EAAE,GAAGA,EAAE,GAAGA,EAAE,IAC/CA,EAAEC,cAAgBE,QAClBH,EAAEC,cAAgBG,OADS,IAAIR,KAAKI,GAEvB,kBAANA,EAAiB,IAAIJ,KAAKI,EAAEK,KAAKL,EAAEM,MAAMN,EAAEL,MAClDY,KAGRC,QAAQ,SAASC,EAAEC,GAQf,OACIC,SAASF,EAAEG,KAAKb,QAAQU,GAAGI,YAC3BF,SAASD,EAAEE,KAAKb,QAAQW,GAAGG,YAC1BJ,EAAEC,IAAID,EAAEC,GACTH,KAGRO,QAAQ,SAASd,EAAEe,EAAMC,GAOtB,OACKL,SAASX,EAAEY,KAAKb,QAAQC,GAAGa,YAC3BF,SAASI,EAAMH,KAAKb,QAAQgB,GAAOF,YACnCF,SAASK,EAAIJ,KAAKb,QAAQiB,GAAKH,WAC/BE,GAASf,GAAKA,GAAKgB,EACnBT,O,+HCnCJU,EAAS,CACX,OACA,CACEC,IAAK,YACLC,MAAO,cAET,QACA,WAoEWC,UAjEE,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACZC,EAAUC,cADc,EAEJC,IAAMC,SAAS,IAFX,mBAEvBC,EAFuB,KAEhBC,EAFgB,OAIDC,YAC3B,CACEC,IAAKC,IAAa,UAClBC,OAAQ,OAEV,CACEC,QAAQ,IAVkB,mBAIrBC,EAJqB,KAIrBA,QAAWC,EAJU,KA+B9B,OAjBAV,IAAMW,WAAU,WACdD,EAAM,CACJE,OAAQ,CACNC,YAAa,EACbC,SAAS,KAEVC,MAAK,SAAAC,GACNb,EAASa,EAAKC,KAAKC,KAAKC,KAAI,SAAAC,GAC1B,OAAO,aACLC,QAASD,EAAIE,IACVF,EAAIG,kBAIZ,CAACb,EAAOb,EAAMe,OAAOU,KAItB,mCACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAME,GAAG,KAAKC,GAAG,KAAjB,SACE,eAAC,IAAD,WACE,cAAC,IAAD,uBAGA,cAAC,IAAD,UACA,cAAC,IAAD,CACEvB,MAAOO,EAAU,GAAKP,EACtBT,OAAQA,EACRiC,SAAO,EACPC,aAAc,EACdC,YAAU,EACVnB,QAASA,EACToB,WAAY,SAACC,GAAD,OAAUhC,EAAQiC,KAAR,oBAA0BD,EAAKR,GAA/B,sBAA+CQ,EAAKT,WAC1EW,YAAa,CACX,UACE,SAACF,GAAD,OACE,6BACG5D,YAAW4D,EAAKG","file":"static/js/19.5ddd3d15.chunk.js","sourcesContent":["export const formatDate = (date) => {\n  // return (new Date(date)).toISOString().slice(0, 19).replace(/-/g, \"/\").replace(\"T\", \" \");\n  return (new Date(date)).toLocaleString();\n}\n\nexport const datesObj = {\n  convert:function(d) {\n      // Converts the date in d to a date-object. The input can be:\n      //   a date object: returned without modification\n      //  an array      : Interpreted as [year,month,day]. NOTE: month is 0-11.\n      //   a number     : Interpreted as number of milliseconds\n      //                  since 1 Jan 1970 (a timestamp) \n      //   a string     : Any format supported by the javascript engine, like\n      //                  \"YYYY/MM/DD\", \"MM/DD/YYYY\", \"Jan 31 2009\" etc.\n      //  an object     : Interpreted as an object with year, month and date\n      //                  attributes.  **NOTE** month is 0-11.\n      return (\n          d.constructor === Date ? d :\n          d.constructor === Array ? new Date(d[0],d[1],d[2]) :\n          d.constructor === Number ? new Date(d) :\n          d.constructor === String ? new Date(d) :\n          typeof d === \"object\" ? new Date(d.year,d.month,d.date) :\n          NaN\n      );\n  },\n  compare:function(a,b) {\n      // Compare two dates (could be of any type supported by the convert\n      // function above) and returns:\n      //  -1 : if a < b\n      //   0 : if a = b\n      //   1 : if a > b\n      // NaN : if a or b is an illegal date\n      // NOTE: The code inside isFinite does an assignment (=).\n      return (\n          isFinite(a=this.convert(a).valueOf()) &&\n          isFinite(b=this.convert(b).valueOf()) ?\n          (a>b)-(a<b) :\n          NaN\n      );\n  },\n  inRange:function(d,start,end) {\n      // Checks if date in d is between dates in start and end.\n      // Returns a boolean or NaN:\n      //    true  : if d is between start and end (inclusive)\n      //    false : if d is before start or after end\n      //    NaN   : if one or more of the dates is illegal.\n      // NOTE: The code inside isFinite does an assignment (=).\n     return (\n          isFinite(d=this.convert(d).valueOf()) &&\n          isFinite(start=this.convert(start).valueOf()) &&\n          isFinite(end=this.convert(end).valueOf()) ?\n          start <= d && d <= end :\n          NaN\n      );\n  }\n}","import React from 'react'\nimport useAxios from 'axios-hooks'\nimport { useHistory } from \"react-router-dom\";\n\nimport { formatDate } from '../../utils/dateUtils'\nimport { PUBLIC_API } from '../../config/index'\n\nimport {\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CDataTable,\n  CRow,\n} from '@coreui/react'\n\n\nconst fields = [\n    'name',\n    {\n      key: 'createdAt',\n      label: 'Registered'\n    },\n    'email',\n    'contact'\n  ]\n\nconst Visitors = ({ match }) => {\n  const history = useHistory()\n  const [items, setItems] = React.useState([])\n\n  const [{ loading }, fetch] = useAxios(\n    {\n      url: PUBLIC_API + '/orders',\n      method: 'GET',\n    },\n    {\n      manual: true\n    }\n  )\n\n  React.useEffect(() => {\n    fetch({\n      params: {\n        appointment: 1,\n        checkUp: false\n      }\n    }).then(resp => {\n      setItems(resp.data.rows.map(row => {\n        return {\n          orderId: row.id,\n          ...row.Patient\n        }\n      }))\n    })\n  }, [fetch, match.params.id])\n  \n\n  return (\n    <>\n      <CRow>\n        <CCol xs=\"12\" lg=\"12\">\n          <CCard>\n            <CCardHeader>\n              Visitors\n            </CCardHeader>\n            <CCardBody>\n            <CDataTable\n              items={loading ? [] : items}\n              fields={fields}\n              striped\n              itemsPerPage={5}\n              pagination\n              loading={loading}\n              onRowClick={(item) => history.push(`/check-up/${item.id}/treatment-${item.orderId}`)}\n              scopedSlots={{\n                'createdAt':\n                  (item) => (\n                    <td>\n                      {formatDate(item.createdAt)}\n                    </td>\n                  )\n              }}\n            />\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n    </>\n  )\n}\n\nexport default Visitors\n"],"sourceRoot":""}