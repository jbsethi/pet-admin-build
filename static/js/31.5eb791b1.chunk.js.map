{"version":3,"sources":["views/visitorDetails/Orders.js"],"names":["fields","key","label","withRouter","history","id","useContext","AppContext","addToast","role","React","useState","show","setShow","orderData","setOrderData","patientData","setPatientData","useAxios","url","PUBLIC_API","method","manual","data","loading","error","fetch","loadData","useCallback","orderId","a","resp","Patient","toggleModal","rows","find","row","message","response","useEffect","location","state","status","item","console","log","items","striped","pagination","onRowClick","overTableSlot","scopedSlots","formatDate","createdAt","checkUpPrice","price","order","refetch"],"mappings":"gTAuBMA,EAAS,CACb,KACA,CACEC,IAAK,YACLC,MAAO,cAET,CACED,IAAK,eACLC,MAAO,gBAET,CACED,IAAK,QACLC,MAAO,eAgGIC,uBA5FA,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,QAASC,EAAS,EAATA,GACzB,EAA2BC,qBAAWC,KAAxBC,GAAd,EAAQC,KAAR,EAAcD,UACd,EAAwBE,IAAMC,UAAS,GAAvC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAkCH,IAAMC,SAAS,MAAjD,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAAsCL,IAAMC,SAAS,MAArD,mBAAOK,EAAP,KAAoBC,EAApB,KAEA,EAA0CC,YACxC,CACEC,IAAKC,IAAa,kBAClBC,OAAQ,OAEV,CACEC,QAAQ,IANZ,0BAASC,EAAT,EAASA,KAAMC,EAAf,EAAeA,QAASC,EAAxB,EAAwBA,MAASC,EAAjC,KAUMC,EAAWjB,IAAMkB,YAAN,uCAAkB,WAAOC,GAAP,mBAAAC,EAAA,+EAEZJ,EAAM,CACvBP,IAAKC,IAAU,0BAAsBf,KAHR,OAEzB0B,EAFyB,OAM/Bd,EAAec,EAAKR,KAAKS,SAErBH,GACFI,GAAY,EAAMF,EAAKR,KAAKW,KAAKC,MAAK,SAAAC,GAAG,OAAIA,EAAI/B,KAAOwB,MAT3B,gDAY/BrB,EAAS,CACP6B,SAAS,2CAAKC,gBAAL,mBAAef,YAAf,eAAqBc,UAAW,2BAbZ,yDAAlB,sDAgBd,CAACX,IAEJhB,IAAM6B,WAAU,WACd,GAAIlC,EAAI,CAAC,IAAD,IACAwB,GAAiB,OAAPzB,QAAO,IAAPA,GAAA,UAAAA,EAASoC,gBAAT,mBAAmBC,aAAnB,eAA0BZ,UAAW,KACrDF,EAASE,MAEV,CAACxB,EAAIsB,IAER,IAAMM,EAAc,SAACS,GAAyB,IAAjBC,EAAgB,uDAAT,KAClCC,QAAQC,IAAIF,GACZ5B,EAAa4B,GACb9B,EAAQ6B,IAGV,OACE,eAAC,IAAD,WACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,6BACA,cAAC,IAAD,UACE,cAAC,IAAD,CACEI,MAAOtB,GAAgBC,EAAN,IAAuB,OAAJF,QAAI,IAAJA,OAAA,EAAAA,EAAMW,OAAQ,GAClDlC,OAAQA,EACR+C,SAAO,EACPC,YAAU,EACVxB,QAASA,EACTyB,WAAY,SAACN,GAAD,OAAUV,GAAY,EAAMU,IACxCO,cACE,yCAEFC,YAAe,CACb,UACE,SAACR,GAAD,OACE,6BACGS,YAAWT,EAAKU,cAGvB,aACE,SAACV,GAAD,OACE,uCACOA,EAAKW,aADZ,WAIJ,MACE,SAACX,GAAD,OACE,uCACOA,EAAKY,MADZ,qBASd,cAAC,IAAD,CAAkB3C,KAAMA,EAAMC,QAASoB,EAAauB,MAAO1C,EAAWE,YAAaA,EAAayC,QAAS9B","file":"static/js/31.5eb791b1.chunk.js","sourcesContent":["import React, { useContext } from 'react'\n\nimport useAxios from 'axios-hooks'\n\nimport { withRouter } from 'react-router-dom'\n\nimport { formatDate } from '../../utils/dateUtils'\n\nimport { PUBLIC_API } from '../../config/index'\n\nimport {\n  CCard,\n  CCol,\n  CRow,\n  CCardHeader,\n  CCardBody,\n  CDataTable,\n} from '@coreui/react'\n\nimport { AppContext } from '../../App.js'\n\nimport UpdateOrderModal from './UpdateOrderModal.js'\n\nconst fields = [\n  'id',\n  {\n    key: 'createdAt',\n    label: 'Registered'\n  },\n  {\n    key: 'checkUpPrice',\n    label: 'Doctor\\'s Fee'\n  },\n  {\n    key: 'price',\n    label: 'Total Bill'\n  }\n]\n\nconst Orders = ({ history, id }) => {\n  const { role, addToast } = useContext(AppContext)\n  const [show, setShow] = React.useState(false)\n  const [orderData, setOrderData] = React.useState(null)\n  const [patientData, setPatientData] = React.useState(null)\n\n  const [{ data, loading, error }, fetch] = useAxios(\n    {\n      url: PUBLIC_API + '/orders/patient',\n      method: 'GET',\n    },\n    {\n      manual: true\n    }\n  )\n\n  const loadData = React.useCallback(async (orderId) => {\n    try {\n      const resp = await fetch({\n        url: PUBLIC_API + `/orders/patient/${id}`\n      })\n\n      setPatientData(resp.data.Patient)\n  \n      if (orderId) {\n        toggleModal(true, resp.data.rows.find(row => row.id === orderId))\n      }\n    } catch (err) {\n      addToast({\n        message: err?.response?.data?.message || 'Something went wrong !'\n      })\n    }\n  }, [fetch])\n\n  React.useEffect(() => {\n    if (id) {\n      const orderId = history?.location?.state?.orderId || null\n      loadData(orderId)\n    }\n  }, [id, loadData])\n\n  const toggleModal = (status, item = null) => {\n    console.log(item)\n    setOrderData(item)\n    setShow(status)\n  }\n\n  return (\n    <CRow>\n      <CCol>\n        <CCard>\n          <CCardHeader>Visitor Orders</CCardHeader>\n          <CCardBody>\n            <CDataTable\n              items={loading ? [] : (error ? [] : data?.rows || [])}\n              fields={fields}\n              striped\n              pagination\n              loading={loading}\n              onRowClick={(item) => toggleModal(true, item)}\n              overTableSlot={\n                <p>All Pets</p>\n              }\n              scopedSlots = {{\n                'createdAt':\n                  (item) => (\n                    <td>\n                      {formatDate(item.createdAt)}\n                    </td>\n                  ),\n                'checkUpPrice':\n                  (item)=>(\n                    <td>\n                      { `${item.checkUpPrice} AED` }\n                    </td>\n                  ),\n                'price':\n                  (item)=>(\n                    <td>\n                      { `${item.price} AED` }\n                    </td>\n                  )\n              }}\n            />\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <UpdateOrderModal show={show} setShow={toggleModal} order={orderData} patientData={patientData} refetch={loadData} />\n    </CRow>\n  )\n}\n\nexport default withRouter(Orders)\n"],"sourceRoot":""}