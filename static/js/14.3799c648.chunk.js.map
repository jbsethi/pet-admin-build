{"version":3,"sources":["utils/dateUtils.js","views/base/tableHeader/TableHeader.js","views/users/Users.js"],"names":["formatDate","date","Date","toLocaleString","datesObj","convert","d","constructor","Array","Number","String","year","month","NaN","compare","a","b","isFinite","this","valueOf","inRange","start","end","TableHeader","keyword","changeKeyword","children","className","sm","type","name","placeholder","autoComplete","value","onChange","onKeyPress","fields","key","_classes","label","Users","React","useState","setKeyword","addToast","useContext","AppContext","history","useHistory","totalPages","setTotalPages","currentPage","setActivePage","useAxios","url","PUBLIC_API","method","params","pageNo","manual","data","loading","error","refetch","useEffect","catch","err","message","response","xl","items","rows","striped","itemsPerPage","clickableRows","onRowClick","item","push","id","overTableSlot","e","search","target","color","variant","onClick","underTableSlot","activePage","pages","onActivePageChange","i","scopedSlots","createdAt","status","active"],"mappings":"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","file":"static/js/14.3799c648.chunk.js","sourcesContent":["export const formatDate = (date) => {\n  // return (new Date(date)).toISOString().slice(0, 19).replace(/-/g, \"/\").replace(\"T\", \" \");\n  return (new Date(date)).toLocaleString();\n}\n\nexport const datesObj = {\n  convert:function(d) {\n      // Converts the date in d to a date-object. The input can be:\n      //   a date object: returned without modification\n      //  an array      : Interpreted as [year,month,day]. NOTE: month is 0-11.\n      //   a number     : Interpreted as number of milliseconds\n      //                  since 1 Jan 1970 (a timestamp) \n      //   a string     : Any format supported by the javascript engine, like\n      //                  \"YYYY/MM/DD\", \"MM/DD/YYYY\", \"Jan 31 2009\" etc.\n      //  an object     : Interpreted as an object with year, month and date\n      //                  attributes.  **NOTE** month is 0-11.\n      return (\n          d.constructor === Date ? d :\n          d.constructor === Array ? new Date(d[0],d[1],d[2]) :\n          d.constructor === Number ? new Date(d) :\n          d.constructor === String ? new Date(d) :\n          typeof d === \"object\" ? new Date(d.year,d.month,d.date) :\n          NaN\n      );\n  },\n  compare:function(a,b) {\n      // Compare two dates (could be of any type supported by the convert\n      // function above) and returns:\n      //  -1 : if a < b\n      //   0 : if a = b\n      //   1 : if a > b\n      // NaN : if a or b is an illegal date\n      // NOTE: The code inside isFinite does an assignment (=).\n      return (\n          isFinite(a=this.convert(a).valueOf()) &&\n          isFinite(b=this.convert(b).valueOf()) ?\n          (a>b)-(a<b) :\n          NaN\n      );\n  },\n  inRange:function(d,start,end) {\n      // Checks if date in d is between dates in start and end.\n      // Returns a boolean or NaN:\n      //    true  : if d is between start and end (inclusive)\n      //    false : if d is before start or after end\n      //    NaN   : if one or more of the dates is illegal.\n      // NOTE: The code inside isFinite does an assignment (=).\n     return (\n          isFinite(d=this.convert(d).valueOf()) &&\n          isFinite(start=this.convert(start).valueOf()) &&\n          isFinite(end=this.convert(end).valueOf()) ?\n          start <= d && d <= end :\n          NaN\n      );\n  }\n}","import React from 'react'\r\n\r\nimport {\r\n  CRow,\r\n  CCol,\r\n  CFormGroup,\r\n  CInput,\r\n} from '@coreui/react'\r\n\r\n\r\nconst TableHeader = ({ keyword = '', changeKeyword = null, children }) => {\r\n  return (\r\n    <CRow className=\"align-items-center justify-content-between pb-2\">\r\n      <CCol sm=\"4\">\r\n        <CFormGroup className=\"mb-0\">\r\n          <CInput\r\n            type=\"text\"\r\n            name=\"nf-text\"\r\n            placeholder=\"Search Here..\"\r\n            autoComplete=\"off\"\r\n            value={keyword}\r\n            onChange={changeKeyword}\r\n            onKeyPress={changeKeyword}\r\n          />\r\n        </CFormGroup>\r\n      </CCol>\r\n      <CCol sm=\"4\" className=\"d-flex justify-content-end\">\r\n        { children }\r\n      </CCol>\r\n    </CRow>\r\n  )\r\n}\r\n\r\nexport default TableHeader\r\n","import React, { useContext } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport useAxios from 'axios-hooks'\nimport TableHeader from '../base/tableHeader/TableHeader'\n\nimport { formatDate } from '../../utils/dateUtils'\n\nimport {\n  CBadge,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CDataTable,\n  CRow,\n  CPagination,\n  CButton\n} from '@coreui/react'\n\nimport { AppContext } from '../../App.js'\nimport { PUBLIC_API } from '../../config/index'\n\nconst fields = [\n  { key: 'name', _classes: 'font-weight-bold' },\n  'email',\n  'username',\n  'role',\n  {\n    key: 'createdAt',\n    label: 'Registered'\n  },\n  'active'\n]\n\nconst getBadge = status => {\n  if (status) {\n    return 'success'\n  } else {\n    return 'danger'\n  }\n}\n\nconst Users = () => {\n  const [keyword, setKeyword] = React.useState('')\n  const { addToast } = useContext(AppContext)\n  const history = useHistory()\n  const [totalPages, setTotalPages] = React.useState(1)\n  const [currentPage, setActivePage] = React.useState(1)\n\n  const [{ data, loading, error }, refetch] = useAxios(\n    {\n      url: PUBLIC_API + '/users',\n      method: 'GET',\n      params: {\n        pageNo: currentPage\n      }\n    },\n    {\n      manual: true\n    }\n  )\n\n  React.useEffect(() => {\n    if (data?.totalPages) {\n      setTotalPages(data.totalPages)\n    }\n  }, [data])\n\n\n  React.useEffect(() => {\n    refetch().catch(err => {\n      addToast({\n        message: err?.response?.data?.message || 'Error Occured try again later !'\n      })\n    })\n  }, [refetch])\n\n  const changeKeyword = (e) => {\n    if(e.key === 'Enter') {\n      refetch({\n        params: {\n          search: keyword\n        }\n      }).catch(err => {\n        addToast({\n          message: err?.response?.data?.message || 'Error Occured try again later !'\n        })\n      })\n    } else {\n      setKeyword(e.target.value)\n    }\n  }\n\n  return (\n    <CRow>\n      <CCol xl={12}>\n        <CCard>\n          <CCardHeader>\n            Users\n          </CCardHeader>\n          <CCardBody>\n          <CDataTable\n            items={loading ? [] : (error ? [] : data?.rows || [])}\n            fields={fields}\n            striped\n            itemsPerPage={10}\n            loading={loading}\n            clickableRows\n            onRowClick={(item) => history.push(`/users/${item.id}`)}\n            overTableSlot={\n              <TableHeader keyword={keyword} changeKeyword={changeKeyword}>\n                <CButton\n                  color=\"primary\"\n                  variant=\"outline\"\n                    className=\"m-2 pl-3 pr-4\"\n                    onClick={() => history.push('/users/add')}\n                  >\n                    <span className=\"ml-1\">Add New User</span>\n                  </CButton>\n              </TableHeader>\n            }\n            underTableSlot={\n              <CPagination\n                activePage={currentPage}\n                pages={totalPages}\n                onActivePageChange={(i) => setActivePage(i)}\n              ></CPagination>\n            }\n            scopedSlots = {{\n              'createdAt':\n                (item) => (\n                  <td>\n                    {formatDate(item.createdAt)}\n                  </td>\n                ),\n              'active':\n                (item)=>(\n                  <td>\n                    <CBadge color={getBadge(item.active)}>\n                      {item.active  ? 'Active' : 'Inactive'}\n                    </CBadge>\n                  </td>\n                )\n            }}\n          />\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  )\n}\n\nexport default Users\n"],"sourceRoot":""}