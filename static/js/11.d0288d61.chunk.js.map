{"version":3,"sources":["utils/dateUtils.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","views/base/tableHeader/TableHeader.js","views/items/AddItem.js","views/items/Items.js"],"names":["formatDate","date","Date","toLocaleString","datesObj","convert","d","constructor","Array","Number","String","year","month","NaN","compare","a","b","isFinite","this","valueOf","inRange","start","end","dateFormat","getFullYear","getMonth","getDate","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","args","arguments","apply","err","undefined","TableHeader","keyword","changeKeyword","children","className","sm","type","name","placeholder","autoComplete","onChange","onKeyPress","AddItem","show","setShow","refetch","itemId","setEditId","addToast","useContext","AppContext","React","useState","services","setServices","petTypes","setPetTypes","description","price","petTypeId","serviceId","active","itemRecord","setItemRecord","useAxios","url","PUBLIC_API","method","manual","loading","fetch","handleChange","e","oldState","target","checked","initializeRecord","useCallback","result","data","rows","console","log","message","response","useEffect","onClose","closeButton","row","md","htmlFor","xs","id","custom","map","petType","service","displayName","color","variant","shape","onClick","config","resp","catch","fields","label","Items","role","setKeyword","totalPages","setTotalPages","currentPage","setActivePage","editId","params","pageNo","loadData","lg","items","filter","field","striped","itemsPerPage","overTableSlot","search","underTableSlot","activePage","pages","onActivePageChange","i","scopedSlots","item","createdAt","size"],"mappings":"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","file":"static/js/11.d0288d61.chunk.js","sourcesContent":["export const formatDate = (date) => {\n  // return (new Date(date)).toISOString().slice(0, 19).replace(/-/g, \"/\").replace(\"T\", \" \");\n  return (new Date(date)).toLocaleString();\n}\n\nexport const datesObj = {\n  convert:function(d) {\n      // Converts the date in d to a date-object. The input can be:\n      //   a date object: returned without modification\n      //  an array      : Interpreted as [year,month,day]. NOTE: month is 0-11.\n      //   a number     : Interpreted as number of milliseconds\n      //                  since 1 Jan 1970 (a timestamp)\n      //   a string     : Any format supported by the javascript engine, like\n      //                  \"YYYY/MM/DD\", \"MM/DD/YYYY\", \"Jan 31 2009\" etc.\n      //  an object     : Interpreted as an object with year, month and date\n      //                  attributes.  **NOTE** month is 0-11.\n      return (\n          d.constructor === Date ? d :\n          d.constructor === Array ? new Date(d[0],d[1],d[2]) :\n          d.constructor === Number ? new Date(d) :\n          d.constructor === String ? new Date(d) :\n          typeof d === \"object\" ? new Date(d.year,d.month,d.date) :\n          NaN\n      );\n  },\n  compare:function(a,b) {\n      // Compare two dates (could be of any type supported by the convert\n      // function above) and returns:\n      //  -1 : if a < b\n      //   0 : if a = b\n      //   1 : if a > b\n      // NaN : if a or b is an illegal date\n      // NOTE: The code inside isFinite does an assignment (=).\n      return (\n          isFinite(a=this.convert(a).valueOf()) &&\n          isFinite(b=this.convert(b).valueOf()) ?\n          (a>b)-(a<b) :\n          NaN\n      );\n  },\n  inRange:function(d,start,end) {\n      // Checks if date in d is between dates in start and end.\n      // Returns a boolean or NaN:\n      //    true  : if d is between start and end (inclusive)\n      //    false : if d is before start or after end\n      //    NaN   : if one or more of the dates is illegal.\n      // NOTE: The code inside isFinite does an assignment (=).\n     return (\n          isFinite(d=this.convert(d).valueOf()) &&\n          isFinite(start=this.convert(start).valueOf()) &&\n          isFinite(end=this.convert(end).valueOf()) ?\n          start <= d && d <= end :\n          NaN\n      );\n  }\n}\n\nexport const dateFormat = (date) => {\n  return `${date.getFullYear()}-${date.getMonth()+1}-${date.getDate()}`\n}\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","import React from 'react'\r\n\r\nimport {\r\n  CRow,\r\n  CCol,\r\n  CFormGroup,\r\n  CInput,\r\n} from '@coreui/react'\r\n\r\n\r\nconst TableHeader = ({ keyword = '', changeKeyword = null, children }) => {\r\n  return (\r\n    <CRow className=\"align-items-center justify-content-between pb-2\">\r\n      <CCol sm=\"4\">\r\n        <CFormGroup className=\"mb-0\">\r\n          <CInput\r\n            type=\"text\"\r\n            name=\"nf-text\"\r\n            placeholder=\"Search Here..\"\r\n            autoComplete=\"off\"\r\n            value={keyword}\r\n            onChange={changeKeyword}\r\n            onKeyPress={changeKeyword}\r\n          />\r\n        </CFormGroup>\r\n      </CCol>\r\n      <CCol sm=\"4\" className=\"d-flex justify-content-end\">\r\n        { children }\r\n      </CCol>\r\n    </CRow>\r\n  )\r\n}\r\n\r\nexport default TableHeader\r\n","import React, { useContext } from 'react'\nimport useAxios from 'axios-hooks'\n\nimport { AppContext } from '../../App.js'\nimport { PUBLIC_API } from '../../config/index'\n\n\nimport {\n  CModal,\n  CModalHeader,\n  CModalBody,\n  CModalFooter,\n  CButton,\n  CFormGroup,\n  CCol,\n  CLabel,\n  CInput,\n  CTextarea,\n  CSwitch,\n  CRow,\n  CSelect,\n} from '@coreui/react'\n\nconst AddItem = ({ show, setShow, refetch, itemId, setEditId }) => {\n  const { addToast } = useContext(AppContext)\n  const [services, setServices] = React.useState([])\n  const [petTypes, setPetTypes] = React.useState([])\n\n  const [itemRecord, setItemRecord] = React.useState({\n    name: '',\n    description: '',\n    price: '',\n    petTypeId: '',\n    serviceId: '',\n    active: true\n  })\n\n  const [\n    { loading },\n    fetch\n  ] = useAxios(\n    {\n      url: PUBLIC_API + '/items',\n      method: 'POST'\n    },\n    { manual: true }\n  )\n\n  const resetAndCancel = () => {\n    setShow(false)\n    setItemRecord({\n      name: '',\n      description: '',\n      price: '',\n      petTypeId: '',\n      serviceId: '',\n      active: true\n    })\n\n    setEditId(null)\n  }\n\n  const confirmClose = () => {\n    setShow(false)\n    setItemRecord({\n      name: '',\n      description: '',\n      price: '',\n      petTypeId: '',\n      serviceId: '',\n      active: true\n    })\n    setEditId(null)\n    refetch()\n  }\n\n  const handleChange = (e) => {\n    setItemRecord((oldState) => {\n      if (e.target.name === 'active') {\n        return {\n          ...oldState,\n          [e.target.name]: e.target.checked\n        }\n      } else {\n        return {\n          ...oldState,\n          [e.target.name]: e.target.value\n        }\n      }\n    })\n  }\n\n  const storeItem = () => {\n    if (!loading) {\n      const config = {\n        data: {\n          ...itemRecord\n        }\n      }\n\n      if (itemId) {\n        config.url = PUBLIC_API + `/items/${itemId}`\n        config.method = 'PUT'\n      }\n\n      fetch(config).then(resp => {\n        confirmClose()\n      }).catch(err => {\n        addToast({\n          message: err.response.data.message\n        })\n      })\n    }\n  }\n\n  const initializeRecord = React.useCallback(async () => {\n    try {\n      let result = await fetch({\n        url: PUBLIC_API + '/services',\n        method: 'GET'\n      })\n  \n      setServices(result?.data?.rows || [])\n  \n      result = await fetch({\n        url: PUBLIC_API + '/pet-types/records/active',\n        method: 'GET'\n      })\n\n      console.log(result)\n  \n      setPetTypes(result?.data || [])\n  \n      if (itemId) {\n        result = await fetch({\n          url: PUBLIC_API + `/items/${itemId}`,\n          method: 'GET'\n        })\n    \n        setItemRecord({\n          name: result.data.name,\n          description: result.data.description,\n          price: result.data.price,\n          petTypeId: result.data.petTypeId,\n          serviceId: result.data.serviceId,\n          active: result.data.active\n        })\n      }\n    } catch (err) {\n      addToast({\n        message: err?.response?.data?.message || 'Error occured !'\n      })\n    }\n  }, [fetch, itemId])\n\n  React.useEffect(() => {\n    if (show) {\n      initializeRecord()\n    }\n  }, [show, initializeRecord])\n\n  return (\n    <>\n      <CModal\n        show={show}\n        onClose={() => setShow(false)}\n      >\n        <CModalHeader closeButton>Add Item</CModalHeader>\n        <CModalBody>\n          {\n            loading?\n            <div className=\"py-5 text-center\">Loading Details ...</div> :\n            <CRow>\n              <CCol className=\"px-5 pt-4\">\n                <CFormGroup row>\n                  <CCol md=\"3\">\n                    <CLabel className=\"pt-1\" htmlFor=\"text-name\">Name</CLabel>\n                  </CCol>\n                  <CCol xs=\"12\" md=\"9\">\n                    <CInput id=\"text-name\" name=\"name\" value={itemRecord.name} onChange={handleChange} placeholder=\"Enter Name for item\" />\n                  </CCol>\n                </CFormGroup>\n                <CFormGroup row>\n                  <CCol md=\"3\">\n                    <CLabel className=\"pt-1\" htmlFor=\"text-price\">Price</CLabel>\n                  </CCol>\n                  <CCol xs=\"12\" md=\"9\">\n                    <CInput id=\"text-price\" name=\"price\" value={itemRecord.price} onChange={handleChange} placeholder=\"Enter Price for item\" />\n                  </CCol>\n                </CFormGroup>\n                <CFormGroup row>\n                  <CCol md=\"3\">\n                    <CLabel className=\"pt-1\" htmlFor=\"text-pet-type\">Pet Type</CLabel>\n                  </CCol>\n                  <CCol xs=\"12\" md=\"9\">\n                    <CSelect \n                      custom \n                      name=\"petTypeId\" \n                      id=\"text-pet-type\"\n                      onChange={handleChange}\n                      value={itemRecord.petTypeId}\n                    >\n                      <option value=\"0\">Select</option>\n                      {\n                        petTypes.map(petType => {\n                          return (\n                            <option key={petType.id} value={petType.id}>{petType.name}</option>\n                          )\n                        })\n                      }\n                    </CSelect>\n                  </CCol>\n                </CFormGroup>\n                <CFormGroup row>\n                  <CCol md=\"3\">\n                    <CLabel className=\"pt-1\" htmlFor=\"text-service\">Service</CLabel>\n                  </CCol>\n                  <CCol xs=\"12\" md=\"9\">\n                    <CSelect \n                      custom \n                      name=\"serviceId\" \n                      id=\"text-service\"\n                      onChange={handleChange}\n                      value={itemRecord.serviceId}\n                    >\n                      <option value=\"0\">Select</option>\n                      {\n                        services.map(service => {\n                          return (\n                            <option key={service.id} value={service.id}>{service.displayName}</option>\n                          )\n                        })\n                      }\n                    </CSelect>\n                  </CCol>\n                </CFormGroup>\n                <CFormGroup row>\n                  <CCol md=\"3\">\n                    <CLabel className=\"pt-1\" htmlFor=\"text-description\">Description</CLabel>\n                  </CCol>\n                  <CCol xs=\"12\" md=\"9\">\n                    <CTextarea id=\"text-description\" name=\"description\" value={itemRecord.description} onChange={handleChange} placeholder=\"Enter Description ...\" ></CTextarea>\n                  </CCol>\n                </CFormGroup>\n                <CFormGroup row>\n                  <CCol xs=\"3\" md=\"3\">\n                    <CLabel htmlFor=\"text-description\">Active</CLabel>\n                  </CCol>\n                  <CCol xs=\"9\" md=\"9\">\n                    <CSwitch\n                      color=\"primary\"\n                      name=\"active\"\n                      checked={itemRecord.active}\n                      onChange={handleChange}\n                      {\n                        ...({\n                          variant: 'opposite',\n                          shape:'pill'\n                        })\n                      }\n                    />\n                  </CCol>\n                </CFormGroup>\n              </CCol>\n            </CRow>\n          }\n        </CModalBody>\n        <CModalFooter>\n          <CButton\n            color=\"secondary\"\n            onClick={() => resetAndCancel()}\n          >\n            Cancel\n          </CButton>\n          <CButton onClick={storeItem} className=\"ml-1\" color=\"primary\">{ loading ? 'Loading' : 'Confirm' }</CButton>\n        </CModalFooter>\n      </CModal>\n    </>\n  )\n}\n\nexport default AddItem\n","import React, { useContext } from 'react'\nimport useAxios from 'axios-hooks'\nimport TableHeader from '../base/tableHeader/TableHeader'\nimport AddItem from './AddItem'\n\nimport { formatDate } from '../../utils/dateUtils'\n\nimport { AppContext } from '../../App.js'\nimport { PUBLIC_API } from '../../config/index'\n\n\nimport {\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CDataTable,\n  CRow,\n  CButton,\n  CPagination\n} from '@coreui/react'\n\nconst fields = [\n    'name',\n    'price',\n    {\n      key: 'createdAt',\n      label: 'Registered'\n    },\n    'description',\n    'actions'\n  ]\n\nconst Items = () => {\n  const { addToast, role } = useContext(AppContext)\n  const [show, setShow] = React.useState(false)\n\n  const [keyword, setKeyword] = React.useState('')\n\n  const [totalPages, setTotalPages] = React.useState(1)\n  const [currentPage, setActivePage] = React.useState(1)\n\n  const [editId, setEditId] = React.useState(null)\n\n  const [{ data, loading, error }, fetch] = useAxios(\n    {\n      url: PUBLIC_API + '/items',\n      method: 'GET',\n      params: {\n        pageNo: currentPage\n      }\n    },\n    {\n      manual: true\n    }\n  )\n\n  const changeKeyword = (e) => {\n    if(e.key === 'Enter') {\n      fetch({\n        params: {\n          search: keyword\n        }\n      }).catch(err => {\n        addToast({\n          message: err.response.data.message\n        })\n      })\n    } else {\n      setKeyword(e.target.value)\n    }\n  }\n\n  const editModal = (id) => {\n    setEditId(id)\n    setShow(true)\n  }\n\n  const loadData = React.useCallback(() => {\n    fetch()\n      .then(resp => {\n        setTotalPages(resp.data.totalPages)\n      })\n  }, [fetch])\n\n  const deleteItem = (id) => {\n    fetch({\n      url: PUBLIC_API + `/items/${id}`,\n      method: 'DELETE'\n    }).then(() => {\n      loadData()\n    })\n  }\n\n  React.useEffect(() => {\n    loadData()\n  }, [loadData])\n\n  return (\n    <>\n      <CRow>\n        <CCol xs=\"12\" lg=\"12\">\n          <CCard>\n            <CCardHeader>\n              Items\n            </CCardHeader>\n            <CCardBody>\n            <CDataTable\n              items={loading ? [] : (error ? [] : data?.rows || [])}\n              fields={fields.filter(field => {\n                if ('actions' == field && role == 'receptionist') {\n                  return false;\n                }\n\n                return true;\n              })}\n              striped\n              itemsPerPage={10}\n              loading={loading}\n              overTableSlot={\n                <TableHeader keyword={keyword} changeKeyword={changeKeyword}>\n                  <CButton\n                    color=\"primary\"\n                    variant=\"outline\"\n                      className=\"m-2 pl-3 pr-4\"\n                      onClick={() => setShow(true)}\n                    >\n                      <span className=\"ml-1\">Add Item</span>\n                    </CButton>\n                </TableHeader>\n              }\n              underTableSlot={\n                <CPagination\n                  activePage={currentPage}\n                  pages={totalPages}\n                  onActivePageChange={(i) => setActivePage(i)}\n                ></CPagination>\n              }\n              scopedSlots={{\n                'price':\n                  (item) => (\n                    <td>\n                      {item.price} AED\n                    </td>\n                  ),\n                'createdAt':\n                  (item) => (\n                    <td>\n                      {formatDate(item.createdAt)}\n                    </td>\n                  ),\n                'actions':\n                  (item) => (\n                    <td>\n                      {\n                        role !== 'receptionist' &&\n                        (\n                        <>\n                          <CButton onClick={() => editModal(item.id)} color=\"primary\" size=\"sm\" className=\"mr-1\">Edit</CButton>\n                          <CButton onClick={() => deleteItem(item.id)} color=\"danger\" size=\"sm\">Delete</CButton>\n                        </>\n                        )\n                      }\n                    </td>\n                  )\n              }}\n            />\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n\n      <AddItem show={show} setShow={setShow} refetch={fetch} itemId={editId} setEditId={setEditId}/>\n    </>\n  )\n}\n\nexport default Items\n"],"sourceRoot":""}