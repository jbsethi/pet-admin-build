{"version":3,"sources":["views/base/tableHeader/TableHeader.js","views/orders/Orders.js"],"names":["TableHeader","keyword","changeKeyword","children","className","sm","type","name","placeholder","autoComplete","value","onChange","onKeyPress","fields","key","label","Orders","useContext","AppContext","addToast","role","useState","setKeyword","show","setShow","orderData","setOrderData","patientData","setPatientData","totalPages","setTotalPages","currentPage","setActivePage","filterType","setFilterType","dayRange","setDayRange","useAxios","url","PUBLIC_API","method","params","pageNo","manual","data","loading","fetch","toggleModal","status","item","Patient","changeDateRangeFilter","e","date","Date","target","range","getFullYear","getMonth","slice","getDate","datesObj","compare","now","message","ranges","useEffect","length","fromDate","toDate","then","resp","count","Math","ceil","catch","err","console","log","response","xs","lg","items","rows","striped","itemsPerPage","onRowClick","overTableSlot","search","onClick","color","variant","size","underTableSlot","activePage","pages","onActivePageChange","i","isEditable","order"],"mappings":"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","file":"static/js/20.50312e17.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport {\r\n  CRow,\r\n  CCol,\r\n  CFormGroup,\r\n  CInput,\r\n} from '@coreui/react'\r\n\r\n\r\nconst TableHeader = ({ keyword = '', changeKeyword = null, children }) => {\r\n  return (\r\n    <CRow className=\"align-items-center justify-content-between pb-2\">\r\n      <CCol sm=\"4\">\r\n        <CFormGroup className=\"mb-0\">\r\n          <CInput\r\n            type=\"text\"\r\n            name=\"nf-text\"\r\n            placeholder=\"Search Here..\"\r\n            autoComplete=\"off\"\r\n            value={keyword}\r\n            onChange={changeKeyword}\r\n            onKeyPress={changeKeyword}\r\n          />\r\n        </CFormGroup>\r\n      </CCol>\r\n      <CCol sm=\"4\" className=\"d-flex justify-content-end\">\r\n        { children }\r\n      </CCol>\r\n    </CRow>\r\n  )\r\n}\r\n\r\nexport default TableHeader\r\n","import {useState, useEffect, useContext} from 'react'\r\nimport useAxios from 'axios-hooks'\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CCol,\r\n  CDataTable,\r\n  CRow,\r\n  CPagination,\r\n  CButton\r\n} from '@coreui/react'\r\n\r\nimport { datesObj } from 'src/utils/dateUtils'\r\n\r\n\r\nimport { PUBLIC_API } from '../../config/index'\r\nimport TableHeader from '../base/tableHeader/TableHeader'\r\n\r\nimport { AppContext } from '../../App.js'\r\n\r\nimport UpdateOrderModal from '../visitorDetails/UpdateOrderModal'\r\n\r\nconst fields = [\r\n  'id',\r\n  {\r\n    key: 'createdAt',\r\n    label: 'Registered'\r\n  },\r\n  {\r\n    key: 'checkUpPrice',\r\n    label: 'Doctor\\'s Fee'\r\n  },\r\n  {\r\n    key: 'price',\r\n    label: 'Total Bill'\r\n  }\r\n]\r\n\r\nconst Orders = () => {\r\n  const { role, addToast } = useContext(AppContext)\r\n  const [keyword, setKeyword] = useState('')\r\n  const [show, setShow] = useState(false)\r\n  const [orderData, setOrderData] = useState(null)\r\n  const [patientData, setPatientData] = useState({})\r\n  const [totalPages, setTotalPages] = useState(1)\r\n  const [currentPage, setActivePage] = useState(1)\r\n  const [filterType, setFilterType] = useState(0);\r\n  \r\n  const [dayRange, setDayRange] = useState([]);\r\n\r\n  const [{ data, loading }, fetch] = useAxios(\r\n    {\r\n      url: PUBLIC_API + 'orders',\r\n      method: 'GET',\r\n      params: {\r\n        pageNo: currentPage\r\n      }\r\n    },\r\n    {\r\n      manual: true\r\n    }\r\n  )\r\n\r\n  const changeKeyword = (e) => {\r\n    if(e.key === 'Enter') {\r\n      fetch({\r\n        params: {\r\n          search: keyword\r\n        }\r\n      })\r\n    } else {\r\n      setKeyword(e.target.value)\r\n    }\r\n  }\r\n\r\n  const toggleModal = (status, item = null) => {\r\n    setOrderData(item)\r\n    setShow(status)\r\n    setPatientData(item?.Patient)\r\n  }\r\n\r\n  const changeDayFilter = (e) => {\r\n    const date = new Date(e.target.value);\r\n    const fromDate = `${date.getFullYear()}-${('0'+(date.getMonth()+1)).slice(-2)}-${date.getDate()}`\r\n\r\n    setDayRange([fromDate, fromDate]);\r\n  }\r\n\r\n  const changeDateRangeFilter = (e) => {\r\n\r\n    const date = new Date(e.target.value);\r\n    const range = `${date.getFullYear()}-${('0'+(date.getMonth()+1)).slice(-2)}-${date.getDate()}`\r\n\r\n    if (e.target.name === 'to') {\r\n      if (datesObj.compare(dayRange[0], range) > 0) {\r\n        e.target.value = Date.now();\r\n        addToast({\r\n          message: 'To date should be greater than from date !'\r\n        })\r\n      } else {\r\n        setDayRange(ranges => {\r\n          return [ ranges[0], range ]\r\n        });\r\n      }\r\n    } else {\r\n      if (datesObj.compare(range, dayRange[1]) > 0) {\r\n        e.target.value = Date.now();\r\n        addToast({\r\n          message: 'To date should be greater than from date !'\r\n        })\r\n      } else {\r\n        setDayRange(ranges => {\r\n          return [ range, ranges[1] ]\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!dayRange.length) {\r\n      const date = new Date();\r\n      const fromDate = `${date.getFullYear()}-${('0'+(date.getMonth()+1)).slice(-2)}-${date.getDate()}`\r\n      setDayRange([fromDate, fromDate]);\r\n    }\r\n  }, [dayRange.length])\r\n\r\n  useEffect(() => {\r\n    const params = {\r\n      fromDate: dayRange[0],\r\n      toDate: dayRange[1]\r\n    }\r\n\r\n    if (filterType === 0) {\r\n      delete params.fromDate\r\n      delete params.toDate\r\n    }\r\n\r\n    fetch({\r\n      params: {\r\n        ...params,\r\n        pageNo: currentPage,\r\n      }\r\n    })\r\n    .then((resp) => {\r\n      const totalPages = resp?.data?.count ? (resp.data.count / 10) : 1;\r\n      setTotalPages(Math.ceil(totalPages));\r\n    })\r\n    .catch(err => {\r\n      console.log(err.response)\r\n    })\r\n  }, [dayRange, currentPage, fetch, filterType])\r\n\r\n  return (\r\n    <>\r\n      <CRow>\r\n        <CCol xs=\"12\" lg=\"12\">\r\n          <CCard>\r\n            <CCardHeader>\r\n              Orders\r\n            </CCardHeader>\r\n            <CCardBody>\r\n            <CDataTable\r\n              items={loading ? [] : data?.rows || []}\r\n              fields={fields}\r\n              striped\r\n              itemsPerPage={10}\r\n              loading={loading}\r\n              onRowClick={(item) => toggleModal(true, item)}\r\n              overTableSlot={\r\n                <>\r\n                <TableHeader keyword={keyword} changeKeyword={changeKeyword}>\r\n                </TableHeader>\r\n                <div className=\"d-flex justify-content-between pb-3\">\r\n                  <div className=\"d-flex\">\r\n                    <CButton onClick={() => setFilterType(1)} color=\"primary\" variant=\"outline\" size=\"sm\">Filter by Date</CButton>\r\n                    <CButton onClick={() => setFilterType(2)} className=\"ml-2\" color=\"info\" variant=\"outline\" size=\"sm\">Filter by date Range</CButton>\r\n                    {\r\n                      filterType !== 0 &&\r\n                      <CButton onClick={() => setFilterType(0)} className=\"ml-2\" color=\"danger\" variant=\"outline\" size=\"sm\">Reset Filters</CButton>\r\n                    }\r\n                  </div>\r\n                  {\r\n                    filterType === 1 &&\r\n                      <div className=\"d-flex align-items-center\">\r\n                        <label className=\"mb-0\">Filter by Date: </label>\r\n                        <input onChange={changeDayFilter} className=\"ml-2\" type=\"date\" />\r\n                      </div>\r\n                  }\r\n                  {\r\n                    filterType === 2 &&\r\n                      <div className=\"d-flex align-items-center\">\r\n                        <div className=\"d-flex align-items-center\">\r\n                          <label className=\"mb-0\">Filter From: </label>\r\n                          <input onChange={changeDateRangeFilter} className=\"ml-2\" type=\"date\" name=\"from\"/>\r\n                        </div>\r\n                        <div className=\"d-flex align-items-center ml-3\">\r\n                          <label className=\"mb-0\">Filter To: </label>\r\n                          <input onChange={changeDateRangeFilter} className=\"ml-2\" type=\"date\" name=\"to\" />\r\n                        </div>\r\n                      </div>\r\n                  }\r\n                </div>\r\n                </>\r\n              }\r\n              underTableSlot={\r\n                <CPagination\r\n                  activePage={currentPage}\r\n                  pages={totalPages}\r\n                  onActivePageChange={(i) => setActivePage(i)}\r\n                ></CPagination>\r\n              }\r\n            />\r\n            </CCardBody>\r\n          </CCard>\r\n        </CCol>\r\n      </CRow>\r\n\r\n      <UpdateOrderModal isEditable={false} show={show} setShow={toggleModal} order={orderData} patientData={patientData} />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Orders"],"sourceRoot":""}