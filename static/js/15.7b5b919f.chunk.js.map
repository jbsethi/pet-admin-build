{"version":3,"sources":["utils/dateUtils.js","views/base/tableHeader/TableHeader.js","views/visitors/Visitors.js"],"names":["formatDate","date","Date","toLocaleString","datesObj","convert","d","constructor","Array","Number","String","year","month","NaN","compare","a","b","isFinite","this","valueOf","inRange","start","end","TableHeader","keyword","changeKeyword","children","className","sm","type","name","placeholder","autoComplete","value","onChange","onKeyPress","fields","key","label","Visitors","React","useContext","AppContext","role","addToast","useState","setKeyword","totalPages","setTotalPages","currentPage","setActivePage","history","useHistory","useAxios","url","PUBLIC_API","method","manual","data","loading","error","fetch","useEffect","params","pageNo","then","resp","count","Math","ceil","xs","lg","items","rows","striped","itemsPerPage","onRowClick","item","push","id","scopedSlots","createdAt","underTableSlot","activePage","pages","onActivePageChange","i","overTableSlot","e","search","catch","err","message","response","target","color","variant","onClick"],"mappings":"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","file":"static/js/15.7b5b919f.chunk.js","sourcesContent":["export const formatDate = (date) => {\n  // return (new Date(date)).toISOString().slice(0, 19).replace(/-/g, \"/\").replace(\"T\", \" \");\n  return (new Date(date)).toLocaleString();\n}\n\nexport const datesObj = {\n  convert:function(d) {\n      // Converts the date in d to a date-object. The input can be:\n      //   a date object: returned without modification\n      //  an array      : Interpreted as [year,month,day]. NOTE: month is 0-11.\n      //   a number     : Interpreted as number of milliseconds\n      //                  since 1 Jan 1970 (a timestamp) \n      //   a string     : Any format supported by the javascript engine, like\n      //                  \"YYYY/MM/DD\", \"MM/DD/YYYY\", \"Jan 31 2009\" etc.\n      //  an object     : Interpreted as an object with year, month and date\n      //                  attributes.  **NOTE** month is 0-11.\n      return (\n          d.constructor === Date ? d :\n          d.constructor === Array ? new Date(d[0],d[1],d[2]) :\n          d.constructor === Number ? new Date(d) :\n          d.constructor === String ? new Date(d) :\n          typeof d === \"object\" ? new Date(d.year,d.month,d.date) :\n          NaN\n      );\n  },\n  compare:function(a,b) {\n      // Compare two dates (could be of any type supported by the convert\n      // function above) and returns:\n      //  -1 : if a < b\n      //   0 : if a = b\n      //   1 : if a > b\n      // NaN : if a or b is an illegal date\n      // NOTE: The code inside isFinite does an assignment (=).\n      return (\n          isFinite(a=this.convert(a).valueOf()) &&\n          isFinite(b=this.convert(b).valueOf()) ?\n          (a>b)-(a<b) :\n          NaN\n      );\n  },\n  inRange:function(d,start,end) {\n      // Checks if date in d is between dates in start and end.\n      // Returns a boolean or NaN:\n      //    true  : if d is between start and end (inclusive)\n      //    false : if d is before start or after end\n      //    NaN   : if one or more of the dates is illegal.\n      // NOTE: The code inside isFinite does an assignment (=).\n     return (\n          isFinite(d=this.convert(d).valueOf()) &&\n          isFinite(start=this.convert(start).valueOf()) &&\n          isFinite(end=this.convert(end).valueOf()) ?\n          start <= d && d <= end :\n          NaN\n      );\n  }\n}","import React from 'react'\r\n\r\nimport {\r\n  CRow,\r\n  CCol,\r\n  CFormGroup,\r\n  CInput,\r\n} from '@coreui/react'\r\n\r\n\r\nconst TableHeader = ({ keyword = '', changeKeyword = null, children }) => {\r\n  return (\r\n    <CRow className=\"align-items-center justify-content-between pb-2\">\r\n      <CCol sm=\"4\">\r\n        <CFormGroup className=\"mb-0\">\r\n          <CInput\r\n            type=\"text\"\r\n            name=\"nf-text\"\r\n            placeholder=\"Search Here..\"\r\n            autoComplete=\"off\"\r\n            value={keyword}\r\n            onChange={changeKeyword}\r\n            onKeyPress={changeKeyword}\r\n          />\r\n        </CFormGroup>\r\n      </CCol>\r\n      <CCol sm=\"4\" className=\"d-flex justify-content-end\">\r\n        { children }\r\n      </CCol>\r\n    </CRow>\r\n  )\r\n}\r\n\r\nexport default TableHeader\r\n","import React from 'react'\nimport useAxios from 'axios-hooks'\nimport { useHistory } from \"react-router-dom\";\nimport TableHeader from '../base/tableHeader/TableHeader'\n\nimport { formatDate } from '../../utils/dateUtils'\nimport { PUBLIC_API } from '../../config/index'\n\nimport {\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CDataTable,\n  CRow,\n  CButton,\n  CPagination\n} from '@coreui/react'\n\nimport { AppContext } from '../../App.js'\n\nconst fields = [\n    'name',\n    {\n      key: 'createdAt',\n      label: 'Registered'\n    },\n    'email',\n    'contact'\n  ]\n\nconst Visitors = () => {\n  const { role, addToast } = React.useContext(AppContext)\n  const [keyword, setKeyword] = React.useState('')\n  const [totalPages, setTotalPages] = React.useState(1)\n  const [currentPage, setActivePage] = React.useState(1)\n\n  const history = useHistory()\n\n  const handleClick = () => {\n    history.push(\"/visitors/add\")\n  }\n\n  const [{ data, loading, error }, fetch] = useAxios(\n    {\n      url: PUBLIC_API + '/patients',\n      method: 'GET',\n    },\n    {\n      manual: true\n    }\n  )\n\n  const changeKeyword = (e) => {\n    if(e.key === 'Enter') {\n      fetch({\n        params: {\n          search: keyword\n        }\n      }).catch(err => {\n        addToast({\n          message: err.response.data.message\n        })\n      })\n    } else {\n      setKeyword(e.target.value)\n    }\n  }\n\n  React.useEffect(() => {\n    fetch({\n      params: {\n        pageNo: currentPage\n      }\n    })\n      .then((resp) => {\n        const totalPages = resp?.data?.count ? (resp.data.count / 10) : 1;\n        setTotalPages(Math.ceil(totalPages));\n      })\n  }, [fetch, currentPage])\n\n  return (\n    <>\n      <CRow>\n        <CCol xs=\"12\" lg=\"12\">\n          <CCard>\n            <CCardHeader>\n              Visitors\n            </CCardHeader>\n            <CCardBody>\n            <CDataTable\n              items={loading ? [] : (error ? [] : data?.rows || [])}\n              fields={fields}\n              striped\n              itemsPerPage={10}\n              loading={loading}\n              onRowClick={(item) => history.push(`/visitors/${item.id}/details`)}\n              scopedSlots = {{\n                'createdAt':\n                  (item) => (\n                    <td>\n                      {formatDate(item.createdAt)}\n                    </td>\n                  )\n              }}\n              underTableSlot={\n                <CPagination\n                  activePage={currentPage}\n                  pages={totalPages}\n                  onActivePageChange={(i) => setActivePage(i)}\n                ></CPagination>\n              }\n              overTableSlot={\n                role !== 'doctor' &&\n                <TableHeader keyword={keyword} changeKeyword={changeKeyword}>\n                  <CButton\n                    color=\"primary\"\n                    variant=\"outline\"\n                      className=\"m-2 pl-3 pr-4\"\n                      onClick={handleClick}\n                    >\n                      <span className=\"ml-1\">Add Visit</span>\n                    </CButton>\n                </TableHeader>\n              }\n            />\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n    </>\n  )\n}\n\nexport default Visitors\n"],"sourceRoot":""}