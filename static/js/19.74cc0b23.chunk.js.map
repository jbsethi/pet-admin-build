{"version":3,"sources":["utils/dateUtils.js","views/treatment/NewPrescription.js","views/treatment/PetHistory.js","views/treatment/PetTab.js","views/treatment/PetTabs.js","views/treatment/Treatment.js"],"names":["formatDate","date","Date","toISOString","slice","replace","withRouter","match","show","setShow","details","refetch","addToast","React","useContext","AppContext","useState","recommendations","setRecommendations","selectedRecomendation","setSelectedRecomendation","treatments","setTreatments","useAxios","url","method","manual","fetch","statement","prescription","description","followUp","treatmentRecord","setTreatmentRecord","handleChange","e","oldState","target","name","value","useEffect","Recomendations","map","o","i","addNewRecommendation","idx","itemId","label","Item","recommendationElem","r","className","md","disabled","options","find","onChange","option","handleSelectChange","onClick","removeRecommendation","size","serviceId","filter","op","length","then","resp","data","id","onClose","htmlFor","placeholder","color","type","orderId","params","slug","split","petId","recomendations","catch","err","message","response","PetHistory","role","setDetails","items","setItems","loading","rows","fields","onRowClick","item","viewDetails","striped","scopedSlots","createdAt","status","pet","to","pathname","PetTabs","pets","Treatment","history","useHistory","patientId","path","exact","render","component"],"mappings":"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","file":"static/js/19.74cc0b23.chunk.js","sourcesContent":["export const formatDate = (date) => {\n  return (new Date(date)).toISOString().slice(0, 19).replace(/-/g, \"/\").replace(\"T\", \" \");\n}","import { CModal, CModalBody, CModalFooter, CModalHeader, CFormGroup, CLabel, CInput, CButton, CTextarea, CRow, CCol } from '@coreui/react'\nimport React from 'react'\n\nimport RSelect from 'react-select';\n\nimport { withRouter } from 'react-router-dom'\n\nimport useAxios from 'axios-hooks'\nimport { AppContext } from '../../App'\n\nconst NewPrescription = ({ match, show, setShow, details, refetch }) => {\n  const { addToast } = React.useContext(AppContext)\n  const [recommendations, setRecommendations] = React.useState([])\n  const [selectedRecomendation, setSelectedRecomendation] = React.useState([])\n  const [treatments, setTreatments] = React.useState([])\n\n  const [, fetch] = useAxios(\n    {\n      url: 'https://app.aloropivetcenter.com/api/treatments',\n      method: 'POST',\n    },\n    {\n      manual: true\n    }\n  )\n\n  const [treatmentRecord, setTreatmentRecord] = React.useState({\n    statement: '',\n    prescription: '',\n    description: '',\n    followUp: ''\n  })\n\n  const handleChange = (e) => {\n    setTreatmentRecord(oldState => {\n      return {\n        ...oldState,\n        [e.target.name]: e.target.value\n      }\n    })\n  }\n\n  const handleSelectChange = (option, i) => {\n    setSelectedRecomendation((oldState => {\n      return [...oldState, { idx: i, ...option }]\n    }))\n  }\n\n  const addNewPrescription = () => {\n    if (!details) {\n      let followUp = treatmentRecord?.followUp || null\n\n      const data = {\n        ...treatmentRecord,\n        orderId: match.params.slug.split('-')[1],\n        petId: match.params.petId,\n        followUp ,\n        recomendations: selectedRecomendation.map(r => r.value)\n      }\n\n      fetch({\n        data\n      }).then(resp => {\n        refetch()\n        setTreatmentRecord({\n          statement: '',\n          prescription: '',\n          description: '',\n          followUp: ''\n        })\n        setShow(false)\n      }).catch((err) => {\n        addToast({\n          message: err?.response?.data?.message || 'Error Occured ! Try again later'\n        })\n      })\n    }\n  }\n\n  React.useEffect(() => {\n    if (show && details) {\n      setTreatmentRecord({\n        statement: details.statement,\n        prescription: details.prescription,\n        description: details.description,\n        followUp: ''\n      })\n\n      setSelectedRecomendation(() => {\n        return details.Recomendations.map((o, i) => {\n          addNewRecommendation()\n          return {\n            idx: i,\n            value: o.itemId,\n            label: o.Item.name\n          }\n        })\n      })\n    }\n\n    return () => {\n      setRecommendations([])\n      setSelectedRecomendation([])\n    }\n  }, [details, show])\n\n  const recommendationElem = recommendations.map((r, i) => {\n    return (\n      <CRow key={i} className=\"align-items-center px-3 py-2\">\n        <CCol md=\"1\">{i+1}</CCol>\n        <CCol>\n          <RSelect disabled={details} options={treatments} value={selectedRecomendation.find(o => o.idx === i)} onChange={(option) => handleSelectChange(option, i)}></RSelect>\n        </CCol>\n        <CCol md=\"2\">\n          {\n            !details &&\n            <CButton onClick={() => removeRecommendation(i)} size=\"sm\">Remove</CButton>\n          }\n        </CCol>\n      </CRow>\n    )\n  })\n\n  const addNewRecommendation = () => {\n    setRecommendations((oldState) => {\n      return [...oldState, {\n        serviceId: ''\n      }]\n    })\n  }\n\n  const removeRecommendation = (i) => {\n    setRecommendations((oldState) => {\n      return oldState.filter((r, idx) => idx !== i)\n    })\n\n    setSelectedRecomendation((oldState => {\n      return oldState.filter(op => op.idx !== i)\n    }))\n  }\n\n  React.useEffect(() => {\n    if (show && treatments.length === 0) {\n      fetch({\n        url: 'https://app.aloropivetcenter.com/api/items/records/all?serviceId=3',\n        method: 'GET'\n      }).then(resp => {\n        setTreatments(resp.data.map(r => {\n          return {\n            label: r.name,\n            value: r.id\n          }\n        }))\n      })\n    }\n  }, [show, treatments, fetch])\n\n  return (\n    <CModal show={show} onClose={() => setShow(false)}>\n      <CModalHeader>\n        {\n          details ?\n          'Treatment Details' :\n          'New Prescription'\n        }\n      </CModalHeader>\n      <CModalBody>\n      <CFormGroup>\n        <CLabel htmlFor=\"Statement\">Statement</CLabel>\n        <CInput disabled={details} value={treatmentRecord.statement} name=\"statement\" onChange={handleChange} id=\"statement\" placeholder=\"Enter Statement\" />\n      </CFormGroup>\n      <CFormGroup>\n        <CLabel htmlFor=\"prescription\">Prescription</CLabel>\n        <CInput disabled={details} value={treatmentRecord.prescription} name=\"prescription\" onChange={handleChange} id=\"prescription\" placeholder=\"Enter Prescription\" />\n      </CFormGroup>\n      \n      <CFormGroup className=\"py-3 m-0\">\n        <CRow className=\"px-3 justify-content-between align-items-center\">\n          <CLabel htmlFor=\"recomendation\">Recomendation</CLabel>\n          {\n            !details &&\n            <CButton onClick={addNewRecommendation} size=\"sm\" color=\"primary\">Add Recommendation</CButton>\n          }\n        </CRow>\n        {\n          recommendationElem.length > 0 &&\n          <section className=\"py-2\">\n            {recommendationElem}\n          </section>\n        }\n        {/* <CRow className=\"align-items-center px-3 py-4\">\n          <CCol md=\"1\">1</CCol>\n          <CCol>\n            <CInput></CInput>\n          </CCol>\n          <CCol md=\"2\">\n            <CButton size=\"sm\">Remove</CButton>\n          </CCol>\n        </CRow> */}\n        {/* <CInput disabled={details} value={treatmentRecord.recomendation} name=\"recomendation\" onChange={handleChange} id=\"recomendation\" placeholder=\"Enter Recomendation\" /> */}\n      </CFormGroup>\n\n      <CFormGroup>\n        <CLabel htmlFor=\"description\">Description</CLabel>\n        <CTextarea \n          disabled={details}\n          value={treatmentRecord.description}\n          onChange={handleChange}\n          name=\"description\"\n          id=\"description\" \n          placeholder=\"Enter Description\"\n        />\n      </CFormGroup>\n      <CFormGroup>\n        <CLabel htmlFor=\"followUp\">Follow up ?</CLabel>\n        <CInput disabled={details} type=\"date\" value={treatmentRecord.followUp} name=\"followUp\" onChange={handleChange} id=\"followUp\" placeholder=\"Enter follow Up day\" />\n      </CFormGroup>\n      </CModalBody>\n      <CModalFooter>\n        <CButton color=\"danger\" onClick={() => setShow(false)}>Cancel</CButton>\n        {\n          !details &&\n          <CButton onClick={addNewPrescription} color=\"primary\">Submit</CButton>\n        }\n      </CModalFooter>\n    </CModal>\n  )\n}\n\nexport default withRouter(NewPrescription)\n","import { CButton, CCard, CCardBody, CCardHeader, CDataTable } from '@coreui/react'\nimport React from 'react'\n\nimport useAxios from 'axios-hooks'\n\nimport NewPrescription from './NewPrescription'\nimport { formatDate } from '../../utils/dateUtils'\nimport { AppContext } from '../../App.js'\n\nconst PetHistory = ({ match }) => {\n  const { role } = React.useContext(AppContext)\n  const [details, setDetails] = React.useState(null)\n  const [show, setShow] = React.useState(false)\n  const [items, setItems] = React.useState([])\n\n  const [{ loading }, fetch] = useAxios(\n    {\n      url: 'https://app.aloropivetcenter.com/api/treatments/all/pets',\n      method: 'POST',\n    },\n    {\n      manual: true\n    }\n  )\n\n  const refetch = () => {\n    fetch({\n      data: {\n        petId: match.params.petId\n      }\n    }).then(resp => {\n      setItems(resp?.data?.rows || [])\n    })\n  }\n\n  const viewDetails = (item) => {\n    setDetails(item)\n    setShow(true)\n  }\n\n  const toggleModal = (status) => {\n    setShow(status)\n    if (!status) {\n      setDetails(null)\n    }\n  }\n  \n  React.useEffect(() => {\n    fetch({\n      data: {\n        petId: match.params.petId\n      }\n    }).then(resp => {\n      setItems(resp?.data?.rows || [])\n    })\n  }, [fetch, match.params.petId])\n\n  return (\n    <CCard>\n      <CCardHeader>\n        <div className=\"d-flex justify-content-between align-items-center\">\n          <div className=\"font-lg\">Pet Previous History</div>\n          {\n            role === 'doctor' &&\n            <CButton color=\"primary\" onClick={() => setShow(true)}>\n              Add Prescription for Pet\n            </CButton>\n          }\n        </div>\n      </CCardHeader>\n      <CCardBody className=\"p-0\">\n        <CDataTable\n          loading={loading}\n          fields={['statement', 'description', 'createdAt']}\n          items={items}\n          onRowClick={(item) => viewDetails(item)}\n          striped\n          scopedSlots={{\n            'createdAt':\n              (item) => (\n                <td>\n                  {formatDate(item.createdAt)}\n                </td>\n              )\n          }}\n        ></CDataTable>\n      </CCardBody>\n\n      <NewPrescription  show={show} setShow={toggleModal} refetch={refetch} details={details}/>\n    </CCard>\n  )\n}\n\nexport default PetHistory\n","import { CCard, CCardBody } from '@coreui/react'\nimport React from 'react'\n\nimport { NavLink } from 'react-router-dom'\n\nimport { formatDate } from '../../utils/dateUtils'\n\nimport { withRouter } from 'react-router-dom'\n\nconst PetTab = ({ match, pet }) => {\n  return (\n    <NavLink to={{\n      pathname: `/check-up/${match.params.id}/${match.params.slug}/${pet.id}`\n    }}>\n      <CCard className=\"m-0\">\n        <CCardBody className=\"p-3\">\n          <div className=\"d-flex justify-content-between align-items-center\">\n            <p className=\"m-0\">{pet.name}</p>\n            <p className=\"m-0\">{formatDate(pet.createdAt)}</p>\n          </div>\n        </CCardBody>\n      </CCard>\n    </NavLink>\n  )\n}\n\nexport default withRouter(PetTab)\n","import React from 'react'\nimport PetTab from './PetTab'\n\nconst PetTabs = ({ pets }) => {\n  return pets.map(pet => (\n    <PetTab key={pet.id} pet={pet}></PetTab>\n  ))\n}\n\nexport default PetTabs\n","import {  CCard, CCardBody, CCardHeader, CCol, CRow } from '@coreui/react'\nimport React from 'react'\nimport { Route, useHistory } from 'react-router-dom'\nimport PetHistory from './PetHistory'\nimport PetTabs from './PetTabs'\n\nimport useAxios from 'axios-hooks'\n\nconst Treatment = ({ match }) => {\n  const history = useHistory()\n  const [items, setItems] = React.useState([])\n  const [{ loading }, fetch] = useAxios(\n    {\n      url: 'https://app.aloropivetcenter.com/api/pets/all/patients',\n      method: 'POST',\n    },\n    {\n      manual: true\n    }\n  )\n\n  React.useEffect(() => {\n    fetch({\n      data: {\n        patientId: match.params.id\n      }\n    }).then((resp) => {\n      setItems(resp?.data?.rows.map(item => {\n        return {\n          id: item.id,\n          name: item.name,\n          createdAt: item.createdAt\n        }\n      }))\n\n      if (resp?.data?.rows?.length  > 0)\n        history.replace(`/check-up/${match.params.id}/${match.params.slug}/${resp?.data?.rows[0].id}`)\n    })\n\n  }, [fetch, match.params.id, match.params.slug, history])\n\n\n  return (\n    <>\n      <CRow>\n        <CCol md=\"4\">\n          <CCard>\n            <CCardHeader>\n              <p className=\"font-lg m-0\">Pets</p>\n            </CCardHeader>\n            <CCardBody className=\"p-0\">\n              {\n                loading ?\n                <p className=\"pt-3 text-center\">Loading ...</p> :\n                <PetTabs pets={items} ></PetTabs>\n              }\n            </CCardBody>\n          </CCard>\n        </CCol>\n        <CCol>\n          <Route path=\"/check-up/:id/:slug\" exact render={() => (\n            <p className=\"p-5 text-center\">Please select Pet to view details.</p>\n          )} />\n          <Route path=\"/check-up/:id/:slug/:petId\" component={PetHistory} />\n        </CCol>\n      </CRow>\n    </>\n  )\n}\n\nexport default Treatment\n"],"sourceRoot":""}