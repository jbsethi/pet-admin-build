{"version":3,"sources":["views/base/tableHeader/TableHeader.js","views/orders/Orders.js"],"names":["TableHeader","keyword","changeKeyword","children","className","sm","type","name","placeholder","autoComplete","value","onChange","onKeyPress","fields","key","label","Orders","useContext","AppContext","addToast","role","useState","setKeyword","searchQuery","setSearchQuery","show","setShow","orderData","setOrderData","patientData","totalPages","setTotalPages","currentPage","setActivePage","filterType","setFilterType","totalRecords","setTotalRecords","dayRange","setDayRange","useAxios","url","PUBLIC_API","method","params","pageNo","manual","data","loading","fetch","loadOrderDetails","toggleModal","status","a","item","id","changeDateRangeFilter","e","date","Date","target","range","getFullYear","getMonth","slice","getDate","length","datesObj","compare","now","message","ranges","fetchOrders","fromDate","toDate","search","then","res","count","useEffect","xs","lg","items","rows","striped","itemsPerPage","onRowClick","overTableSlot","style","marginRight","onClick","border","custom","marginLeft","color","gap","justifyContent","paddingBottom","fontWeight","scopedSlots","formatDate","createdAt","Patient","underTableSlot","activePage","pages","onActivePageChange","i","disableUpdate","refetch","order"],"mappings":"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","file":"static/js/25.b20a660b.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport {\r\n  CRow,\r\n  CCol,\r\n  CFormGroup,\r\n  CInput,\r\n} from '@coreui/react'\r\n\r\n\r\nconst TableHeader = ({ keyword = '', changeKeyword = null, children }) => {\r\n  return (\r\n    <CRow className=\"align-items-center justify-content-between pb-2\">\r\n      <CCol sm=\"4\">\r\n        <CFormGroup className=\"mb-0\">\r\n          <CInput\r\n            type=\"text\"\r\n            name=\"nf-text\"\r\n            placeholder=\"Search Here..\"\r\n            autoComplete=\"off\"\r\n            value={keyword}\r\n            onChange={changeKeyword}\r\n            onKeyPress={changeKeyword}\r\n          />\r\n        </CFormGroup>\r\n      </CCol>\r\n      <CCol sm=\"4\" className=\"d-flex justify-content-end\">\r\n        { children }\r\n      </CCol>\r\n    </CRow>\r\n  )\r\n}\r\n\r\nexport default TableHeader\r\n","import {useState, useEffect, useContext} from 'react'\nimport useAxios from 'axios-hooks'\nimport {\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CDataTable,\n  CRow,\n  CPagination,\n  CSelect,\n  CButton\n} from '@coreui/react'\n\nimport { datesObj, formatDate } from 'src/utils/dateUtils'\n\n\nimport { PUBLIC_API } from '../../config/index'\nimport TableHeader from '../base/tableHeader/TableHeader'\n\nimport { AppContext } from '../../App.js'\n\nimport UpdateOrderModal from '../visitorDetails/UpdateOrderModal'\n\nconst fields = [\n  'id',\n  {\n    key: 'visitorName',\n    label: 'Visitor\\'s Name',\n  },\n  {\n    key: 'createdAt',\n    label: 'Registered'\n  },\n  {\n    key: 'checkUpPrice',\n    label: 'Doctor\\'s Fee'\n  },\n  {\n    key: 'price',\n    label: 'Total Bill'\n  }\n]\n\nconst Orders = () => {\n  const { role, addToast } = useContext(AppContext)\n  const [keyword, setKeyword] = useState('')\n  const [searchQuery, setSearchQuery] = useState('')\n  const [show, setShow] = useState(false)\n  const [orderData, setOrderData] = useState(null)\n  const [patientData, setPatientData] = useState({})\n  const [totalPages, setTotalPages] = useState(1)\n  const [currentPage, setActivePage] = useState(1)\n  const [filterType, setFilterType] = useState(0);\n  const [totalRecords, setTotalRecords] = useState(null);\n\n  const [dayRange, setDayRange] = useState([]);\n\n  const [{ data, loading }, fetch] = useAxios(\n    {\n      url: PUBLIC_API + 'orders',\n      method: 'GET',\n      params: {\n        pageNo: currentPage\n      }\n    },\n    {\n      manual: true\n    }\n  )\n\n  const [_, loadOrderDetails] = useAxios(\n    {\n      method: 'GET',\n    },\n    {\n      manual: true\n    }\n  )\n\n  const changeKeyword = (e) => {\n    if(e.key === 'Enter') {\n      setSearchQuery(keyword)\n    } else {\n      setKeyword(e.target.value)\n    }\n  }\n\n  const toggleModal = async (status, item = null) => {\n    if (!!item) {\n      const { data } = await loadOrderDetails({\n        url: PUBLIC_API + 'orders/' + item.id,\n      })\n\n      setOrderData(data)\n    } else {\n      setOrderData(null)\n    }\n\n    setShow(status)\n  }\n\n  const changeDayFilter = (e) => {\n    const date = new Date(e.target.value);\n    const fromDate = `${date.getFullYear()}-${('0'+(date.getMonth()+1)).slice(-2)}-${date.getDate()}`\n\n    setDayRange([fromDate, fromDate]);\n  }\n\n  const changeDateRangeFilter = (e) => {\n    const date = new Date(e.target.value);\n    const range = `${date.getFullYear()}-${('0'+(date.getMonth()+1)).slice(-2)}-${date.getDate()}`\n\n    if (dayRange.length === 0) {\n      setDayRange([range])\n      return;\n    }\n\n    if (e.target.name === 'to') {\n      if (datesObj.compare(dayRange[0], range) > 0) {\n        e.target.value = Date.now();\n        addToast({\n          message: 'To date should be greater than from date !'\n        })\n      } else {\n        setDayRange(ranges => {\n          return [ ranges[0], range ]\n        });\n      }\n    } else {\n      if (datesObj.compare(range, dayRange[1]) > 0) {\n        e.target.value = Date.now();\n        addToast({\n          message: 'To date should be greater than from date !'\n        })\n      } else {\n        setDayRange(ranges => {\n          return [ range, ranges[1] ]\n        });\n      }\n    }\n  }\n\n  const fetchOrders = () => {\n    const params = {\n      pageNo: currentPage,\n      fromDate: dayRange[0],\n      toDate: dayRange[1],\n    }\n\n    if (searchQuery) {\n      params.search = searchQuery\n    }\n\n    fetch({\n      params\n    })\n      .then(res => {\n        setTotalRecords(res?.data?.count || 0)\n        setTotalPages(res?.data?.totalPages || 1)\n        setActivePage(res?.data?.pageNo)\n      })\n  }\n\n  useEffect(() => {\n    if (!(filterType === 2 && dayRange.length === 1)) {\n      fetchOrders()\n    }\n  }, [dayRange, currentPage, fetch, searchQuery])\n\n  return (\n    <>\n      <CRow>\n        <CCol xs=\"12\" lg=\"12\">\n          <CCard>\n            <CCardHeader>\n              Orders\n            </CCardHeader>\n            <CCardBody>\n            <CDataTable\n              items={loading ? [] : data?.rows || []}\n              fields={fields}\n              striped\n              itemsPerPage={10}\n              loading={false}\n              onRowClick={(item) => toggleModal(true, item)}\n              overTableSlot={\n                <>\n                <TableHeader keyword={keyword} changeKeyword={changeKeyword}>\n                </TableHeader>\n                <div className=\"d-flex justify-content-between pb-3\">\n                  <div className=\"d-flex\">\n                  <div style={{ marginRight: '10px' }}>\n                    <CButton onClick={() => {\n                      setFilterType(1)\n                      const date = new Date();\n                      const fromDate = `${date.getFullYear()}-${('0'+(date.getMonth()+1)).slice(-2)}-${date.getDate()}`\n                      setDayRange([fromDate, fromDate]);\n                    }} style={{ border: '1px solid #d8dbe0' }} >Current</CButton>\n                  </div>\n                  <CSelect\n                    custom\n                    name=\"order\"\n                    value={filterType}\n                    onChange={(e) => {\n                      setDayRange([])\n                      setFilterType(+e.target.value)\n                    }}\n                  >\n                    <option value=\"0\">No Filter</option>\n                    <option value=\"1\">Filter by Date</option>\n                    <option value=\"2\">Filter By Range</option>\n                  </CSelect>\n                  <div style={{ marginLeft: '10px' }}>\n                  <CButton color=\"danger\" onClick={() => {\n                      setFilterType(0)\n                      setKeyword('')\n                      setSearchQuery('')\n                      setDayRange([]);\n                    }} style={{ border: '1px solid #d8dbe0' }} >Clear</CButton>\n                  </div>\n                  </div>\n                  {\n                    filterType === 1 &&\n                    <div className=\"d-flex align-items-center\">\n                      <label className=\"mb-0\">Filter by Date: </label>\n                      <input onChange={changeDayFilter} className=\"ml-2\" type=\"date\" />\n                    </div>\n                  }\n                  {\n                    filterType === 2 &&\n                    <div className=\"d-flex align-items-center\">\n                      <div className=\"d-flex align-items-center\">\n                        <label className=\"mb-0\">Filter From: </label>\n                        <input onChange={changeDateRangeFilter} className=\"ml-2\" type=\"date\" name=\"from\"/>\n                      </div>\n                      <div className=\"d-flex align-items-center ml-3\">\n                        <label className=\"mb-0\">Filter To: </label>\n                        <input onChange={changeDateRangeFilter} className=\"ml-2\" type=\"date\" name=\"to\" />\n                      </div>\n                    </div>\n                  }\n                </div>\n\n                <div className=\"d-flex\" style={{ gap: '30px', justifyContent: 'space-between' }}>\n                <div style={{ paddingBottom: '5px', color: '#1d273e', fontWeight: '600'}}>\n                 <span> Total Orders: <span>{totalRecords}</span></span>\n                 {\n                   searchQuery &&\n                  <span style={{ marginLeft: '20px' }}> Search String: <span>{searchQuery}</span></span>\n                 }\n\n                </div>\n                {\n                  filterType !== 0 &&\n                  dayRange.length !== 0 &&\n                  <div><span style={{ paddingBottom: '5px', color: '#1d273e', fontWeight: '600' }}>Showing results for :</span> <span>{dayRange[0]}</span> { filterType == 2 && <span>: {dayRange[1]}</span>}</div>\n                }\n                </div>\n                </>\n              }\n              scopedSlots={{\n                'createdAt': (item) => (\n                  <td>\n                    {formatDate(item.createdAt)}\n                  </td>\n                ),\n\n                'visitorName': (item) => (\n                  <td>\n                    {item?.Patient?.name || '---'}\n                  </td>\n                )\n              }}\n              underTableSlot={\n                <CPagination\n                  activePage={currentPage}\n                  pages={totalPages}\n                  onActivePageChange={(i) => setActivePage(i)}\n                ></CPagination>\n              }\n            />\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n\n      <UpdateOrderModal disableUpdate={true} refetch={fetchOrders} show={show} setShow={toggleModal} order={orderData} patientData={patientData} />\n    </>\n  )\n}\n\nexport default Orders\n"],"sourceRoot":""}