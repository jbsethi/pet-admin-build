{"version":3,"sources":["views/base/tableHeader/TableHeader.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","views/items/AddItem.js","views/items/Items.js"],"names":["TableHeader","keyword","changeKeyword","children","className","sm","type","name","placeholder","autoComplete","value","onChange","onKeyPress","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined","AddItem","show","setShow","refetch","itemId","setEditId","React","useState","services","setServices","petTypes","setPetTypes","description","price","petTypeId","serviceId","active","itemRecord","setItemRecord","useAxios","url","method","manual","loading","fetch","handleChange","e","oldState","target","checked","initializeRecord","useCallback","a","result","data","rows","useEffect","onClose","closeButton","row","md","htmlFor","xs","id","custom","map","petType","service","displayName","color","variant","shape","onClick","config","resp","fields","label","Items","setKeyword","totalPages","setTotalPages","currentPage","setActivePage","editId","params","pageNo","lg","items","striped","itemsPerPage","overTableSlot","search","underTableSlot","activePage","pages","onActivePageChange","i","scopedSlots","item","size"],"mappings":"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","file":"static/js/7.626d45b9.chunk.js","sourcesContent":["import React from 'react'\n\nimport {\n  CRow,\n  CCol,\n  CFormGroup,\n  CInput,\n} from '@coreui/react'\n\n\nconst TableHeader = ({ keyword = '', changeKeyword = null, children }) => {\n  return (\n    <CRow className=\"align-items-center justify-content-between\">\n      <CCol sm=\"4\">\n        <CFormGroup className=\"mb-0\">\n          <CInput\n            type=\"text\"\n            name=\"nf-text\"\n            placeholder=\"Search Here..\"\n            autoComplete=\"off\"\n            value={keyword}\n            onChange={changeKeyword}\n            onKeyPress={changeKeyword}\n          />\n        </CFormGroup>\n      </CCol>\n      <CCol sm=\"4\" className=\"d-flex justify-content-end\">\n        { children }\n      </CCol>\n    </CRow>\n  )\n}\n\nexport default TableHeader\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","import React from 'react'\nimport useAxios from 'axios-hooks'\n\nimport {\n  CModal,\n  CModalHeader,\n  CModalBody,\n  CModalFooter,\n  CButton,\n  CFormGroup,\n  CCol,\n  CLabel,\n  CInput,\n  CTextarea,\n  CSwitch,\n  CRow,\n  CSelect,\n} from '@coreui/react'\n\nconst AddItem = ({ show, setShow, refetch, itemId, setEditId }) => {\n  const [services, setServices] = React.useState([])\n  const [petTypes, setPetTypes] = React.useState([])\n\n  const [itemRecord, setItemRecord] = React.useState({\n    name: '',\n    description: '',\n    price: '',\n    petTypeId: '',\n    serviceId: '',\n    active: true\n  })\n\n  const [\n    { loading },\n    fetch\n  ] = useAxios(\n    {\n      url: 'https://app.aloropivetcenter.com/api/items',\n      method: 'POST'\n    },\n    { manual: true }\n  )\n\n  const resetAndCancel = () => {\n    setShow(false)\n    setItemRecord({\n      name: '',\n      description: '',\n      price: '',\n      petTypeId: '',\n      serviceId: '',\n      active: true\n    })\n\n    setEditId(null)\n  }\n\n  const confirmClose = () => {\n    setShow(false)\n    setItemRecord({\n      name: '',\n      description: '',\n      price: '',\n      petTypeId: '',\n      serviceId: '',\n      active: true\n    })\n    setEditId(null)\n    refetch()\n  }\n\n  const handleChange = (e) => {\n    setItemRecord((oldState) => {\n      if (e.target.name === 'active') {\n        return {\n          ...oldState,\n          [e.target.name]: e.target.checked\n        }\n      } else {\n        return {\n          ...oldState,\n          [e.target.name]: e.target.value\n        }\n      }\n    })\n  }\n\n  const storeItem = () => {\n    if (!loading) {\n      const config = {\n        data: {\n          ...itemRecord\n        }\n      }\n\n      if (itemId) {\n        config.url = `https://app.aloropivetcenter.com/api/items/${itemId}`\n        config.method = 'PUT'\n      }\n\n      fetch(config).then(resp => {\n        confirmClose()\n      })\n    }\n  }\n\n  const initializeRecord = React.useCallback(async () => {\n    let result = await fetch({\n      url: `https://app.aloropivetcenter.com/api/services`,\n      method: 'GET'\n    })\n\n    setServices(result?.data?.rows || [])\n\n    result = await fetch({\n      url: `https://app.aloropivetcenter.com/api/pet-types`,\n      method: 'GET'\n    })\n\n    setPetTypes(result?.data?.rows || [])\n\n    if (itemId) {\n      result = await fetch({\n        url: `https://app.aloropivetcenter.com/api/items/${itemId}`,\n        method: 'GET'\n      })\n  \n      setItemRecord({\n        name: result.data.name,\n        description: result.data.description,\n        price: result.data.price,\n        petTypeId: result.data.petTypeId,\n        serviceId: result.data.serviceId,\n        active: result.data.active\n      })\n    }\n  }, [fetch, itemId])\n\n  React.useEffect(() => {\n    if (show) {\n      initializeRecord()\n    }\n  }, [show, initializeRecord])\n\n  return (\n    <>\n      <CModal\n        show={show}\n        onClose={() => setShow(false)}\n      >\n        <CModalHeader closeButton>Add Item</CModalHeader>\n        <CModalBody>\n          {\n            loading?\n            <div className=\"py-5 text-center\">Loading Details ...</div> :\n            <CRow>\n              <CCol className=\"px-5 pt-4\">\n                <CFormGroup row>\n                  <CCol md=\"3\">\n                    <CLabel className=\"pt-1\" htmlFor=\"text-name\">Name</CLabel>\n                  </CCol>\n                  <CCol xs=\"12\" md=\"9\">\n                    <CInput id=\"text-name\" name=\"name\" value={itemRecord.name} onChange={handleChange} placeholder=\"Enter Name for item\" />\n                  </CCol>\n                </CFormGroup>\n                <CFormGroup row>\n                  <CCol md=\"3\">\n                    <CLabel className=\"pt-1\" htmlFor=\"text-price\">Price</CLabel>\n                  </CCol>\n                  <CCol xs=\"12\" md=\"9\">\n                    <CInput id=\"text-price\" name=\"price\" value={itemRecord.price} onChange={handleChange} placeholder=\"Enter Price for item\" />\n                  </CCol>\n                </CFormGroup>\n                <CFormGroup row>\n                  <CCol md=\"3\">\n                    <CLabel className=\"pt-1\" htmlFor=\"text-pet-type\">Pet Type</CLabel>\n                  </CCol>\n                  <CCol xs=\"12\" md=\"9\">\n                    <CSelect \n                      custom \n                      name=\"petTypeId\" \n                      id=\"text-pet-type\"\n                      onChange={handleChange}\n                      value={itemRecord.petTypeId}\n                    >\n                      <option value=\"0\">Select</option>\n                      {\n                        petTypes.map(petType => {\n                          return (\n                            <option key={petType.id} value={petType.id}>{petType.name}</option>\n                          )\n                        })\n                      }\n                    </CSelect>\n                  </CCol>\n                </CFormGroup>\n                <CFormGroup row>\n                  <CCol md=\"3\">\n                    <CLabel className=\"pt-1\" htmlFor=\"text-service\">Service</CLabel>\n                  </CCol>\n                  <CCol xs=\"12\" md=\"9\">\n                    <CSelect \n                      custom \n                      name=\"serviceId\" \n                      id=\"text-service\"\n                      onChange={handleChange}\n                      value={itemRecord.serviceId}\n                    >\n                      <option value=\"0\">Select</option>\n                      {\n                        services.map(service => {\n                          return (\n                            <option key={service.id} value={service.id}>{service.displayName}</option>\n                          )\n                        })\n                      }\n                    </CSelect>\n                  </CCol>\n                </CFormGroup>\n                <CFormGroup row>\n                  <CCol md=\"3\">\n                    <CLabel className=\"pt-1\" htmlFor=\"text-description\">Description</CLabel>\n                  </CCol>\n                  <CCol xs=\"12\" md=\"9\">\n                    <CTextarea id=\"text-description\" name=\"description\" value={itemRecord.description} onChange={handleChange} placeholder=\"Enter Description ...\" ></CTextarea>\n                  </CCol>\n                </CFormGroup>\n                <CFormGroup row>\n                  <CCol xs=\"3\" md=\"3\">\n                    <CLabel htmlFor=\"text-description\">Active</CLabel>\n                  </CCol>\n                  <CCol xs=\"9\" md=\"9\">\n                    <CSwitch\n                      color=\"primary\"\n                      name=\"active\"\n                      checked={itemRecord.active}\n                      onChange={handleChange}\n                      {\n                        ...({\n                          variant: 'opposite',\n                          shape:'pill'\n                        })\n                      }\n                    />\n                  </CCol>\n                </CFormGroup>\n              </CCol>\n            </CRow>\n          }\n        </CModalBody>\n        <CModalFooter>\n          <CButton\n            color=\"secondary\"\n            onClick={() => resetAndCancel()}\n          >\n            Cancel\n          </CButton>\n          <CButton onClick={storeItem} className=\"ml-1\" color=\"primary\">{ loading ? 'Loading' : 'Confirm' }</CButton>\n        </CModalFooter>\n      </CModal>\n    </>\n  )\n}\n\nexport default AddItem\n","import React from 'react'\nimport useAxios from 'axios-hooks'\nimport TableHeader from '../base/tableHeader/TableHeader'\nimport AddItem from './AddItem'\n\nimport {\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CDataTable,\n  CRow,\n  CButton,\n  CPagination\n} from '@coreui/react'\n\nconst fields = [\n    'name',\n    'price',\n    {\n      key: 'createdAt',\n      label: 'Registered'\n    },\n    'description',\n    'actions'\n  ]\n\nconst Items = () => {\n  const [show, setShow] = React.useState(false)\n\n  const [keyword, setKeyword] = React.useState('')\n\n  const [totalPages, setTotalPages] = React.useState(1)\n  const [currentPage, setActivePage] = React.useState(1)\n\n  const [editId, setEditId] = React.useState(null)\n\n  const [{ data, loading, error }, fetch] = useAxios(\n    {\n      url: 'https://app.aloropivetcenter.com/api/items',\n      method: 'GET',\n      params: {\n        pageNo: currentPage\n      }\n    },\n    {\n      manual: true\n    }\n  )\n\n  const changeKeyword = (e) => {\n    if(e.key === 'Enter') {\n      fetch({\n        params: {\n          search: keyword\n        }\n      })\n    } else {\n      setKeyword(e.target.value)\n    }\n  }\n\n  const editModal = (id) => {\n    setEditId(id)\n    setShow(true)\n  }\n\n  const deleteItem = (id) => {\n    fetch({\n      url: `https://app.aloropivetcenter.com/api/items/${id}`,\n      method: 'DELETE'\n    })\n  }\n\n  React.useEffect(() => {\n    fetch()\n      .then(resp => {\n        setTotalPages(resp.data.totalPages)\n      })\n  }, [fetch])\n\n  return (\n    <>\n      <CRow>\n        <CCol xs=\"12\" lg=\"12\">\n          <CCard>\n            <CCardHeader>\n              Items\n            </CCardHeader>\n            <CCardBody>\n            <CDataTable\n              items={loading ? [] : (error ? [] : data?.rows || [])}\n              fields={fields}\n              striped\n              itemsPerPage={10}\n              loading={loading}\n              overTableSlot={\n                <TableHeader keyword={keyword} changeKeyword={changeKeyword}>\n                  <CButton\n                    color=\"primary\"\n                    variant=\"outline\"\n                      className=\"m-2 pl-3 pr-4\"\n                      onClick={() => setShow(true)}\n                    >\n                      <span className=\"ml-1\">Add Item</span>\n                    </CButton>\n                </TableHeader>\n              }\n              underTableSlot={\n                <CPagination\n                  activePage={currentPage}\n                  pages={totalPages}\n                  onActivePageChange={(i) => setActivePage(i)}\n                ></CPagination>\n              }\n              scopedSlots={{\n                'actions':\n                  (item) => (\n                    <td>\n                      <CButton onClick={() => editModal(item.id)} color=\"primary\" size=\"sm\" className=\"mr-1\">Edit</CButton>\n                      <CButton onClick={() => deleteItem(item.id)} color=\"danger\" size=\"sm\">Delete</CButton>\n                    </td>\n                  )\n              }}\n            />\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n\n      <AddItem show={show} setShow={setShow} refetch={fetch} itemId={editId} setEditId={setEditId}/>\n    </>\n  )\n}\n\nexport default Items\n"],"sourceRoot":""}