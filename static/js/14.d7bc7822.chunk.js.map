{"version":3,"sources":["utils/dateUtils.js","views/base/tableHeader/TableHeader.js","views/petTypes/AddPetRecord.js","views/petTypes/PetTypes.js"],"names":["formatDate","date","Date","toLocaleString","datesObj","convert","d","constructor","Array","Number","String","year","month","NaN","compare","a","b","isFinite","this","valueOf","inRange","start","end","dateFormat","getFullYear","getMonth","getDate","TableHeader","keyword","changeKeyword","children","className","sm","type","name","placeholder","autoComplete","value","onChange","onKeyPress","AddPetRecord","show","setShow","refetch","petTypeId","setEditId","React","useState","description","active","petRecord","setPetRecord","useAxios","url","PUBLIC_API","method","manual","loading","fetch","handleChange","e","oldState","target","checked","useEffect","then","resp","data","onClose","closeButton","row","md","htmlFor","xs","id","color","variant","shape","onClick","config","fields","key","label","PetTypes","useContext","AppContext","role","addToast","setKeyword","totalPages","setTotalPages","currentPage","setActivePage","editId","params","pageNo","error","loadData","useCallback","lg","items","rows","filter","field","striped","itemsPerPage","overTableSlot","search","underTableSlot","activePage","pages","onActivePageChange","i","scopedSlots","item","createdAt","size"],"mappings":"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","file":"static/js/14.d7bc7822.chunk.js","sourcesContent":["export const formatDate = (date) => {\n  // return (new Date(date)).toISOString().slice(0, 19).replace(/-/g, \"/\").replace(\"T\", \" \");\n  return (new Date(date)).toLocaleString();\n}\n\nexport const datesObj = {\n  convert:function(d) {\n      // Converts the date in d to a date-object. The input can be:\n      //   a date object: returned without modification\n      //  an array      : Interpreted as [year,month,day]. NOTE: month is 0-11.\n      //   a number     : Interpreted as number of milliseconds\n      //                  since 1 Jan 1970 (a timestamp)\n      //   a string     : Any format supported by the javascript engine, like\n      //                  \"YYYY/MM/DD\", \"MM/DD/YYYY\", \"Jan 31 2009\" etc.\n      //  an object     : Interpreted as an object with year, month and date\n      //                  attributes.  **NOTE** month is 0-11.\n      return (\n          d.constructor === Date ? d :\n          d.constructor === Array ? new Date(d[0],d[1],d[2]) :\n          d.constructor === Number ? new Date(d) :\n          d.constructor === String ? new Date(d) :\n          typeof d === \"object\" ? new Date(d.year,d.month,d.date) :\n          NaN\n      );\n  },\n  compare:function(a,b) {\n      // Compare two dates (could be of any type supported by the convert\n      // function above) and returns:\n      //  -1 : if a < b\n      //   0 : if a = b\n      //   1 : if a > b\n      // NaN : if a or b is an illegal date\n      // NOTE: The code inside isFinite does an assignment (=).\n      return (\n          isFinite(a=this.convert(a).valueOf()) &&\n          isFinite(b=this.convert(b).valueOf()) ?\n          (a>b)-(a<b) :\n          NaN\n      );\n  },\n  inRange:function(d,start,end) {\n      // Checks if date in d is between dates in start and end.\n      // Returns a boolean or NaN:\n      //    true  : if d is between start and end (inclusive)\n      //    false : if d is before start or after end\n      //    NaN   : if one or more of the dates is illegal.\n      // NOTE: The code inside isFinite does an assignment (=).\n     return (\n          isFinite(d=this.convert(d).valueOf()) &&\n          isFinite(start=this.convert(start).valueOf()) &&\n          isFinite(end=this.convert(end).valueOf()) ?\n          start <= d && d <= end :\n          NaN\n      );\n  }\n}\n\nexport const dateFormat = (date) => {\n  return `${date.getFullYear()}-${date.getMonth()+1}-${date.getDate()}`\n}\n","import React from 'react'\r\n\r\nimport {\r\n  CRow,\r\n  CCol,\r\n  CFormGroup,\r\n  CInput,\r\n} from '@coreui/react'\r\n\r\n\r\nconst TableHeader = ({ keyword = '', changeKeyword = null, children }) => {\r\n  return (\r\n    <CRow className=\"align-items-center justify-content-between pb-2\">\r\n      <CCol sm=\"4\">\r\n        <CFormGroup className=\"mb-0\">\r\n          <CInput\r\n            type=\"text\"\r\n            name=\"nf-text\"\r\n            placeholder=\"Search Here..\"\r\n            autoComplete=\"off\"\r\n            value={keyword}\r\n            onChange={changeKeyword}\r\n            onKeyPress={changeKeyword}\r\n          />\r\n        </CFormGroup>\r\n      </CCol>\r\n      <CCol sm=\"4\" className=\"d-flex justify-content-end\">\r\n        { children }\r\n      </CCol>\r\n    </CRow>\r\n  )\r\n}\r\n\r\nexport default TableHeader\r\n","import React from 'react'\nimport useAxios from 'axios-hooks'\n\nimport {\n  CModal,\n  CModalHeader,\n  CModalBody,\n  CModalFooter,\n  CButton,\n  CFormGroup,\n  CCol,\n  CLabel,\n  CInput,\n  CTextarea,\n  CSwitch,\n  CRow,\n} from '@coreui/react'\n\nimport { PUBLIC_API } from '../../config/index'\n\nconst AddPetRecord = ({ show, setShow, refetch, petTypeId, setEditId }) => {\n  const [petRecord, setPetRecord] = React.useState({\n    name: '',\n    description: '',\n    active: true\n  })\n\n  const [\n    { loading },\n    fetch\n  ] = useAxios(\n    {\n      url: PUBLIC_API + '/pet-types',\n      method: 'POST'\n    },\n    { manual: true }\n  )\n\n  const resetAndCancel = () => {\n    setShow(false)\n    setPetRecord({\n      name: '',\n      description: '',\n      active: true\n    })\n\n    setEditId(null)\n  }\n\n  const confirmClose = () => {\n    setShow(false)\n    setPetRecord({\n      name: '',\n      description: '',\n      active: true\n    })\n    setEditId(null)\n    refetch()\n  }\n\n  const handleChange = (e) => {\n    setPetRecord((oldState) => {\n      if (e.target.name === 'active') {\n        return {\n          ...oldState,\n          [e.target.name]: e.target.checked\n        }\n      } else {\n        return {\n          ...oldState,\n          [e.target.name]: e.target.value\n        }\n      }\n    })\n  }\n\n  const storePetType = () => {\n    if (!loading) {\n      const config = {\n        data: {\n          ...petRecord\n        }\n      }\n\n      if (petTypeId) {\n        config.url = `PUBLIC_API + '/pet-types/${petTypeId}`\n        config.method = 'PUT'\n      }\n\n      fetch(config).then(resp => {\n        confirmClose()\n      })\n    }\n  }\n\n  React.useEffect(() => {\n    if (petTypeId && show) {\n      fetch({\n        url: PUBLIC_API + `/pet-types/${petTypeId}`,\n        method: 'GET'\n      })\n        .then(resp => {\n          setPetRecord({\n            name: resp.data.name,\n            description: resp.data.description,\n            active: resp.data.active\n          })\n        })\n    }\n  }, [petTypeId, fetch, show])\n\n  return (\n    <>\n      <CModal\n        show={show}\n        onClose={() => setShow(false)}\n      >\n        <CModalHeader closeButton>Add Pet Type</CModalHeader>\n        <CModalBody>\n          {\n            loading?\n            <div className=\"py-5 text-center\">Loading Details ...</div> :\n            <CRow>\n              <CCol className=\"px-5 pt-4\">\n                <CFormGroup row>\n                  <CCol md=\"3\">\n                    <CLabel className=\"pt-1\" htmlFor=\"text-name\">Name</CLabel>\n                  </CCol>\n                  <CCol xs=\"12\" md=\"9\">\n                    <CInput id=\"text-name\" name=\"name\" value={petRecord.name} onChange={handleChange} placeholder=\"Enter Name for Pet type\" />\n                  </CCol>\n                </CFormGroup>\n                <CFormGroup row>\n                  <CCol md=\"3\">\n                    <CLabel className=\"pt-1\" htmlFor=\"text-description\">Description</CLabel>\n                  </CCol>\n                  <CCol xs=\"12\" md=\"9\">\n                    <CTextarea id=\"text-description\" name=\"description\" value={petRecord.description} onChange={handleChange} placeholder=\"Enter Description ...\" ></CTextarea>\n                  </CCol>\n                </CFormGroup>\n                <CFormGroup row>\n                  <CCol xs=\"3\" md=\"3\">\n                    <CLabel htmlFor=\"text-description\">Active</CLabel>\n                  </CCol>\n                  <CCol xs=\"9\" md=\"9\">\n                    <CSwitch\n                      color=\"primary\"\n                      name=\"active\"\n                      checked={petRecord.active}\n                      onChange={handleChange}\n                      {\n                        ...({\n                          variant: 'opposite',\n                          shape:'pill'\n                        })\n                      }\n                    />\n                  </CCol>\n                </CFormGroup>\n              </CCol>\n            </CRow>\n          }\n        </CModalBody>\n        <CModalFooter>\n          <CButton\n            color=\"secondary\"\n            onClick={() => resetAndCancel()}\n          >\n            Cancel\n          </CButton>\n          <CButton onClick={storePetType} className=\"ml-1\" color=\"primary\">{ loading ? 'Loading' : 'Confirm' }</CButton>\n        </CModalFooter>\n      </CModal>\n    </>\n  )\n}\n\nexport default AddPetRecord\n","import React, { useContext } from 'react'\nimport useAxios from 'axios-hooks'\nimport TableHeader from '../base/tableHeader/TableHeader'\nimport AddPetRecord from './AddPetRecord'\n\nimport { formatDate } from '../../utils/dateUtils'\n\nimport { PUBLIC_API } from '../../config/index'\n\nimport {\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CDataTable,\n  CRow,\n  CButton,\n  CPagination\n} from '@coreui/react'\n\nimport { AppContext } from '../../App.js'\n\nconst fields = [\n    'name',\n    {\n      key: 'createdAt',\n      label: 'Registered'\n    },\n    'description',\n    'actions'\n  ]\n\nconst PetTypes = () => {\n  const { addToast, role } = useContext(AppContext)\n  const [show, setShow] = React.useState(false)\n\n  const [keyword, setKeyword] = React.useState('')\n\n  const [totalPages, setTotalPages] = React.useState(1)\n  const [currentPage, setActivePage] = React.useState(1)\n\n  const [editId, setEditId] = React.useState(null)\n\n  const [{ data, loading, error }, fetch] = useAxios(\n    {\n      url: PUBLIC_API + '/pet-types',\n      method: 'GET',\n      params: {\n        pageNo: currentPage\n      }\n    },\n    {\n      manual: true\n    }\n  )\n\n  const changeKeyword = (e) => {\n    if(e.key === 'Enter') {\n      fetch({\n        params: {\n          search: keyword\n        }\n      })\n    } else {\n      setKeyword(e.target.value)\n    }\n  }\n\n  const editModal = (id) => {\n    setEditId(id)\n    setShow(true)\n  }\n\n  const loadData = React.useCallback(() => {\n    fetch()\n      .then(resp => {\n        setTotalPages(resp.data.totalPages)\n      })\n  }, [fetch])\n\n  const deleteItem = (id) => {\n    fetch({\n      url: PUBLIC_API + `/pet-types/${id}`,\n      method: 'DELETE'\n    }).then(() => {\n      loadData()\n    })\n  }\n\n  React.useEffect(() => {\n    loadData()\n  }, [loadData])\n\n  return (\n    <>\n      <CRow>\n        <CCol xs=\"12\" lg=\"12\">\n          <CCard>\n            <CCardHeader>\n              Pet Types\n            </CCardHeader>\n            <CCardBody>\n            <CDataTable\n              items={loading ? [] : (error ? [] : data?.rows || [])}\n              fields={fields.filter(field => {\n                if ('actions' == field && role == 'receptionist') return false;\n                return true;\n              })}\n              striped\n              itemsPerPage={10}\n              loading={loading}\n              overTableSlot={\n                <TableHeader keyword={keyword} changeKeyword={changeKeyword}>\n                  <CButton\n                    color=\"primary\"\n                    variant=\"outline\"\n                      className=\"m-2 pl-3 pr-4\"\n                      onClick={() => setShow(true)}\n                    >\n                      <span className=\"ml-1\">Add Pet Type</span>\n                    </CButton>\n                </TableHeader>\n              }\n              underTableSlot={\n                <CPagination\n                  activePage={currentPage}\n                  pages={totalPages}\n                  onActivePageChange={(i) => setActivePage(i)}\n                ></CPagination>\n              }\n              scopedSlots={{\n                'createdAt':\n                  (item) => (\n                    <td>\n                      {formatDate(item.createdAt)}\n                    </td>\n                  ),\n                'actions':\n                  (item) => (\n                    <td>\n                      {\n                        role !== 'receptionist' &&\n                        <>\n                          <CButton onClick={() => editModal(item.id)} color=\"primary\" size=\"sm\" className=\"mr-1\">Edit</CButton>\n                          <CButton onClick={() => deleteItem(item.id)} color=\"danger\" size=\"sm\">Delete</CButton>\n                        </>\n                      }\n                    </td>\n                  )\n              }}\n            />\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n\n      <AddPetRecord show={show} setShow={setShow} refetch={fetch} petTypeId={editId} setEditId={setEditId}/>\n    </>\n  )\n}\n\nexport default PetTypes\n"],"sourceRoot":""}