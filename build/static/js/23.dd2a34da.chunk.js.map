{"version":3,"sources":["views/treatment/NewPrescription.js","views/treatment/PetHistory.js","views/treatment/PetTab.js","views/treatment/PetTabs.js","views/treatment/Treatment.js"],"names":["withRouter","match","show","setShow","details","refetch","useAxios","url","method","manual","fetch","React","useState","statement","prescription","description","recomendation","followUp","treatmentRecord","setTreatmentRecord","handleChange","e","oldState","target","name","value","useEffect","onClose","htmlFor","disabled","onChange","id","placeholder","type","color","onClick","tempDate","Date","setDate","getDate","getFullYear","getMonth","slice","data","orderId","params","slug","split","petId","then","resp","PetHistory","role","useContext","AppContext","setDetails","items","setItems","loading","rows","className","fields","onRowClick","item","viewDetails","striped","status","pet","to","pathname","createdAt","PetTabs","pets","map","Treatment","history","useHistory","patientId","length","replace","md","path","exact","render","component"],"mappings":"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","file":"static/js/23.dd2a34da.chunk.js","sourcesContent":["import { CModal, CModalBody, CModalFooter, CModalHeader, CFormGroup, CLabel, CInput, CButton } from '@coreui/react'\nimport React from 'react'\n\nimport { withRouter } from 'react-router-dom'\n\nimport useAxios from 'axios-hooks'\n\nconst NewPrescription = ({ match, show, setShow, details, refetch }) => {\n  const [, fetch] = useAxios(\n    {\n      url: 'https://app.aloropivetcenter.com/api/treatments',\n      method: 'POST',\n    },\n    {\n      manual: true\n    }\n  )\n\n  const [treatmentRecord, setTreatmentRecord] = React.useState({\n    statement: '',\n    prescription: '',\n    description: '',\n    recomendation: '',\n    followUp: ''\n  })\n\n  const handleChange = (e) => {\n    setTreatmentRecord(oldState => {\n      return {\n        ...oldState,\n        [e.target.name]: e.target.value\n      }\n    })\n  }\n\n  const addNewPrescription = () => {\n    if (!details) {\n      let followUp = ''\n      if (treatmentRecord?.followUp > 0) {\n        const tempDate = new Date()\n        tempDate.setDate(tempDate.getDate() + treatmentRecord?.followUp)\n\n        followUp = `${tempDate.getFullYear()}-${('0' + (tempDate.getMonth() + 1)).slice(-2)}-${( '0' + tempDate.getDate()).slice(-2)}`\n      } \n\n      const data = {\n        ...treatmentRecord,\n        orderId: match.params.slug.split('-')[1],\n        petId: match.params.petId,\n        followUp \n      }\n\n      fetch({\n        data\n      }).then(resp => {\n        refetch()\n        setTreatmentRecord({\n          statement: '',\n          prescription: '',\n          description: '',\n          recomendation: '',\n          followUp: ''\n        })\n        setShow(false)\n      })\n    }\n  }\n\n  React.useEffect(() => {\n    if (show && details) {\n      setTreatmentRecord({\n        statement: details.statement,\n        prescription: details.prescription,\n        description: details.description,\n        recomendation: details.recomendation,\n        followUp: ''\n      })\n    }\n  }, [details, show])\n\n  return (\n    <CModal show={show} onClose={() => setShow(false)}>\n      <CModalHeader>\n        {\n          details ?\n          'Treatment Details' :\n          'New Prescription'\n        }\n      </CModalHeader>\n      <CModalBody>\n      <CFormGroup>\n        <CLabel htmlFor=\"Statement\">Statement</CLabel>\n        <CInput disabled={details} value={treatmentRecord.statement} name=\"statement\" onChange={handleChange} id=\"statement\" placeholder=\"Enter Statement\" />\n      </CFormGroup>\n      <CFormGroup>\n        <CLabel htmlFor=\"prescription\">Prescription</CLabel>\n        <CInput disabled={details} value={treatmentRecord.prescription} name=\"prescription\" onChange={handleChange} id=\"prescription\" placeholder=\"Enter Prescription\" />\n      </CFormGroup>\n      <CFormGroup>\n        <CLabel htmlFor=\"recomendation\">Recomendation</CLabel>\n        <CInput disabled={details} value={treatmentRecord.recomendation} name=\"recomendation\" onChange={handleChange} id=\"recomendation\" placeholder=\"Enter Recomendation\" />\n      </CFormGroup>\n      <CFormGroup>\n        <CLabel htmlFor=\"description\">Description</CLabel>\n        <CInput disabled={details} value={treatmentRecord.description} name=\"description\" onChange={handleChange} id=\"description\" placeholder=\"Enter Description\" />\n      </CFormGroup>\n      <CFormGroup>\n        <CLabel htmlFor=\"followUp\">Follow up ?</CLabel>\n        <CInput disabled={details} type=\"number\" value={treatmentRecord.followUp} name=\"followUp\" onChange={handleChange} id=\"followUp\" placeholder=\"Enter follow Up day\" />\n      </CFormGroup>\n      </CModalBody>\n      <CModalFooter>\n        <CButton color=\"danger\" onClick={() => setShow(false)}>Cancel</CButton>\n        {\n          !details &&\n          <CButton onClick={addNewPrescription} color=\"primary\">Submit</CButton>\n        }\n      </CModalFooter>\n    </CModal>\n  )\n}\n\nexport default withRouter(NewPrescription)\n","import { CButton, CCard, CCardBody, CCardHeader, CDataTable } from '@coreui/react'\nimport React from 'react'\n\nimport useAxios from 'axios-hooks'\n\nimport NewPrescription from './NewPrescription'\nimport { AppContext } from '../../App.js'\n\nconst PetHistory = ({ match }) => {\n  const { role } = React.useContext(AppContext)\n  const [details, setDetails] = React.useState(null)\n  const [show, setShow] = React.useState(false)\n  const [items, setItems] = React.useState([])\n\n  const [{ loading }, fetch] = useAxios(\n    {\n      url: 'https://app.aloropivetcenter.com/api/treatments/all/pets',\n      method: 'POST',\n    },\n    {\n      manual: true\n    }\n  )\n\n  const refetch = () => {\n    fetch({\n      data: {\n        petId: match.params.petId\n      }\n    }).then(resp => {\n      setItems(resp?.data?.rows || [])\n    })\n  }\n\n  const viewDetails = (item) => {\n    setDetails(item)\n    setShow(true)\n  }\n\n  const toggleModal = (status) => {\n    setShow(status)\n    if (!status) {\n      setDetails(null)\n    }\n  }\n  \n  React.useEffect(() => {\n    fetch({\n      data: {\n        petId: match.params.petId\n      }\n    }).then(resp => {\n      setItems(resp?.data?.rows || [])\n    })\n  }, [fetch, match.params.petId])\n\n  return (\n    <CCard>\n      <CCardHeader>\n        <div className=\"d-flex justify-content-between align-items-center\">\n          <div className=\"font-lg\">Pet Previous History</div>\n          {\n            role === 'doctor' &&\n            <CButton color=\"primary\" onClick={() => setShow(true)}>\n              Add Prescription for Pet\n            </CButton>\n          }\n        </div>\n      </CCardHeader>\n      <CCardBody className=\"p-0\">\n        <CDataTable\n          loading={loading}\n          fields={['statement', 'description', 'createdAt']}\n          items={items}\n          onRowClick={(item) => viewDetails(item)}\n          striped\n        ></CDataTable>\n      </CCardBody>\n\n      <NewPrescription  show={show} setShow={toggleModal} refetch={refetch} details={details}/>\n    </CCard>\n  )\n}\n\nexport default PetHistory\n","import { CCard, CCardBody } from '@coreui/react'\nimport React from 'react'\n\nimport { NavLink } from 'react-router-dom'\n\nimport { withRouter } from 'react-router-dom'\n\nconst PetTab = ({ match, pet }) => {\n  return (\n    <NavLink to={{\n      pathname: `/appointments/${match.params.id}/${match.params.slug}/${pet.id}`\n    }}>\n      <CCard className=\"m-0\">\n        <CCardBody className=\"p-3\">\n          <div className=\"d-flex justify-content-between align-items-center\">\n            <p className=\"m-0\">{pet.name}</p>\n            <p className=\"m-0\">{pet.createdAt}</p>\n          </div>\n        </CCardBody>\n      </CCard>\n    </NavLink>\n  )\n}\n\nexport default withRouter(PetTab)\n","import React from 'react'\nimport PetTab from './PetTab'\n\nconst PetTabs = ({ pets }) => {\n  return pets.map(pet => (\n    <PetTab key={pet.id} pet={pet}></PetTab>\n  ))\n}\n\nexport default PetTabs\n","import {  CCard, CCardBody, CCardHeader, CCol, CRow } from '@coreui/react'\nimport React from 'react'\nimport { Route, useHistory } from 'react-router-dom'\nimport PetHistory from './PetHistory'\nimport PetTabs from './PetTabs'\n\nimport useAxios from 'axios-hooks'\n\nconst Treatment = ({ match }) => {\n  const history = useHistory()\n  const [items, setItems] = React.useState([])\n  const [{ loading }, fetch] = useAxios(\n    {\n      url: 'https://app.aloropivetcenter.com/api/pets/all/patients',\n      method: 'POST',\n    },\n    {\n      manual: true\n    }\n  )\n\n  React.useEffect(() => {\n    fetch({\n      data: {\n        patientId: match.params.id\n      }\n    }).then((resp) => {\n      setItems(resp?.data?.rows.map(item => {\n        return {\n          id: item.id,\n          name: item.name,\n          createdAt: item.createdAt\n        }\n      }))\n\n      if (resp?.data?.rows?.length  > 0)\n        history.replace(`/appointments/${match.params.id}/${match.params.slug}/${resp?.data?.rows[0].id}`)\n    })\n\n  }, [fetch, match.params.id, match.params.slug, history])\n\n\n  return (\n    <>\n      <CRow>\n        <CCol md=\"4\">\n          <CCard>\n            <CCardHeader>\n              <p className=\"font-lg m-0\">Pets</p>\n            </CCardHeader>\n            <CCardBody className=\"p-0\">\n              {\n                loading ?\n                <p className=\"pt-3 text-center\">Loading ...</p> :\n                <PetTabs pets={items} ></PetTabs>\n              }\n            </CCardBody>\n          </CCard>\n        </CCol>\n        <CCol>\n          <Route path=\"/appointments/:id/:slug\" exact render={() => (\n            <p className=\"p-5 text-center\">Please select Pet to view details.</p>\n          )} />\n          <Route path=\"/appointments/:id/:slug/:petId\" component={PetHistory} />\n        </CCol>\n      </CRow>\n    </>\n  )\n}\n\nexport default Treatment\n"],"sourceRoot":""}